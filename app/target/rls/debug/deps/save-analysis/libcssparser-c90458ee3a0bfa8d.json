{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1","program":"C:\\Users\\spide\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","cssparser","C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=c90458ee3a0bfa8d","-C","extra-filename=-c90458ee3a0bfa8d","--out-dir","c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps","--extern","cssparser_macros=c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps\\cssparser_macros-72bc7ea62938e5f3.dll","--extern","matches=c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps\\libmatches-616eafb43d02c4fa.rmeta","--extern","phf=c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps\\libphf-2502af3e1513b706.rmeta","--extern","procedural_masquerade=c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps\\libprocedural_masquerade-5af44b2a7abd093f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\spide\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\deps\\libcssparser-c90458ee3a0bfa8d.rmeta"},"prelude":{"crate_id":{"name":"cssparser","disambiguator":[2845681438747248495,12376662149293412861]},"crate_root":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src","external_crates":[{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2951836381390344939,16649128255697415692]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[11710271729537087300,7936810236211621860]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[221620535861096092,14052674651022364528]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6754765288211962248,11319126938093173531]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12146955935630897969,9411134559866261862]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14833668363639865695,5655522694650611187]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4272166054306925428,11429919485785531186]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12683507629027033058,3032465482526171902]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3621516987667804763,14118985286121416357]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3114763798488812350,3771385689256703239]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[12308387851717752688,1271721453298801945]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[41357415245366713,267475365531445088]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[14877867959531453948,6948897495248942720]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":14,"id":{"name":"cssparser_macros","disambiguator":[16226794240235615484,10998036497039932751]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":15,"id":{"name":"matches","disambiguator":[16041627574485876518,10453178523142559766]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":16,"id":{"name":"procedural_masquerade","disambiguator":[10738162058140508484,14612462712881725595]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":17,"id":{"name":"phf","disambiguator":[8921582562515515227,4777458562981324679]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":18,"id":{"name":"phf_shared","disambiguator":[7322754385883593673,1846819080759526637]}},{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","num":19,"id":{"name":"siphasher","disambiguator":[14788826011678388718,15135852944213951979]}}],"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":206,"byte_end":4170,"line_start":5,"line_end":123,"column_start":1,"column_end":32}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2805,"byte_end":2806,"line_start":81,"line_end":81,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2829,"byte_end":2834,"line_start":83,"line_end":83,"column_start":21,"column_end":26},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2836,"byte_end":2850,"line_start":83,"line_end":83,"column_start":28,"column_end":42},"alias_span":null,"name":"SourceLocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2886,"byte_end":2901,"line_start":84,"line_end":84,"column_start":34,"column_end":49},"alias_span":null,"name":"parse_important","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2937,"byte_end":2954,"line_start":85,"line_end":85,"column_start":34,"column_end":51},"alias_span":null,"name":"DeclarationParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2956,"byte_end":2977,"line_start":85,"line_end":85,"column_start":53,"column_end":74},"alias_span":null,"name":"DeclarationListParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2979,"byte_end":3000,"line_start":85,"line_end":85,"column_start":76,"column_end":97},"alias_span":null,"name":"parse_one_declaration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3036,"byte_end":3050,"line_start":86,"line_end":86,"column_start":34,"column_end":48},"alias_span":null,"name":"RuleListParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3052,"byte_end":3066,"line_start":86,"line_end":86,"column_start":50,"column_end":64},"alias_span":null,"name":"parse_one_rule","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3102,"byte_end":3112,"line_start":87,"line_end":87,"column_start":34,"column_end":44},"alias_span":null,"name":"AtRuleType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3114,"byte_end":3133,"line_start":87,"line_end":87,"column_start":46,"column_end":65},"alias_span":null,"name":"QualifiedRuleParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3135,"byte_end":3147,"line_start":87,"line_end":87,"column_start":67,"column_end":79},"alias_span":null,"name":"AtRuleParser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3171,"byte_end":3190,"line_start":88,"line_end":88,"column_start":22,"column_end":41},"alias_span":null,"name":"stylesheet_encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3192,"byte_end":3207,"line_start":88,"line_end":88,"column_start":43,"column_end":58},"alias_span":null,"name":"EncodingSupport","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3226,"byte_end":3230,"line_start":89,"line_end":89,"column_start":17,"column_end":21},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3232,"byte_end":3237,"line_start":89,"line_end":89,"column_start":23,"column_end":28},"alias_span":null,"name":"Color","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3239,"byte_end":3258,"line_start":89,"line_end":89,"column_start":30,"column_end":49},"alias_span":null,"name":"parse_color_keyword","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3274,"byte_end":3283,"line_start":90,"line_end":90,"column_start":14,"column_end":23},"alias_span":null,"name":"parse_nth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3306,"byte_end":3311,"line_start":91,"line_end":91,"column_start":22,"column_end":27},"alias_span":null,"name":"ToCss","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3313,"byte_end":3328,"line_start":91,"line_end":91,"column_start":29,"column_end":44},"alias_span":null,"name":"CssStringWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3330,"byte_end":3350,"line_start":91,"line_end":91,"column_start":46,"column_end":66},"alias_span":null,"name":"serialize_identifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3352,"byte_end":3368,"line_start":91,"line_end":91,"column_start":68,"column_end":84},"alias_span":null,"name":"serialize_string","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3370,"byte_end":3392,"line_start":91,"line_end":91,"column_start":86,"column_end":108},"alias_span":null,"name":"TokenSerializationType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3412,"byte_end":3418,"line_start":92,"line_end":92,"column_start":18,"column_end":24},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3420,"byte_end":3429,"line_start":92,"line_end":92,"column_start":26,"column_end":35},"alias_span":null,"name":"Delimiter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3431,"byte_end":3441,"line_start":92,"line_end":92,"column_start":37,"column_end":47},"alias_span":null,"name":"Delimiters","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3443,"byte_end":3457,"line_start":92,"line_end":92,"column_start":49,"column_end":63},"alias_span":null,"name":"SourcePosition","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3459,"byte_end":3469,"line_start":92,"line_end":92,"column_start":65,"column_end":75},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3471,"byte_end":3486,"line_start":92,"line_end":92,"column_start":77,"column_end":92},"alias_span":null,"name":"BasicParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3488,"byte_end":3499,"line_start":92,"line_end":92,"column_start":94,"column_end":105},"alias_span":null,"name":"ParserInput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3525,"byte_end":3537,"line_start":93,"line_end":93,"column_start":24,"column_end":36},"alias_span":null,"name":"UnicodeRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3564,"byte_end":3577,"line_start":94,"line_end":94,"column_start":26,"column_end":39},"alias_span":null,"name":"CompactCowStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":3625,"byte_end":3648,"line_start":97,"line_end":97,"column_start":32,"column_end":55},"alias_span":null,"name":"_internal__to_lowercase","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":206,"byte_end":4170,"line_start":5,"line_end":123,"column_start":1,"column_end":32},"name":"","qualname":"::","value":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":58},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":356},{"krate":0,"index":365},{"krate":0,"index":414},{"krate":0,"index":434},{"krate":0,"index":483},{"krate":0,"index":508}],"decl_id":null,"docs":"Implementation of [CSS Syntax Module Level 3](https://drafts.csswg.org/css-syntax/) for Rust.","sig":null,"attributes":[{"value":"crate_name = \"cssparser\"","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":206,"byte_end":234,"line_start":5,"line_end":5,"column_start":1,"column_end":29}},{"value":"crate_type = \"rlib\"","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":235,"byte_end":258,"line_start":6,"line_end":6,"column_start":1,"column_end":24}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":307,"byte_end":329,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"!\n\nImplementation of [CSS Syntax Module Level 3](https://drafts.csswg.org/css-syntax/) for Rust.\n\n# Input\n\nEverything is based on `Parser` objects, which borrow a `&str` input.\nIf you have bytes (from a file, the network, or something)\nand want to support character encodings other than UTF-8,\nsee the `stylesheet_encoding` function,\nwhich can be used together with rust-encoding or encoding-rs.\n\n# Conventions for parsing functions\n\n* Take (at least) a `input: &mut cssparser::Parser` parameter\n* Return `Result<_, ()>`\n* When returning `Ok(_)`,\n  the function must have consumed exactly the amount of input that represents the parsed value.\n* When returning `Err(())`, any amount of input may have been consumed.\n\nAs a consequence, when calling another parsing function, either:\n\n* Any `Err(())` return value must be propagated.\n  This happens by definition for tail calls,\n  and can otherwise be done with the `try!` macro.\n* Or the call must be wrapped in a `Parser::try` call.\n  `try` takes a closure that takes a `Parser` and returns a `Result`,\n  calls it once,\n  and returns itself that same result.\n  If the result is `Err`,\n  it restores the position inside the input to the one saved before calling the closure.\n\nExamples:\n\n```{rust,ignore}\n// 'none' | <image>\nfn parse_background_image(context: &ParserContext, input: &mut Parser)\n                                    -> Result<Option<Image>, ()> {\n    if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {\n        Ok(None)\n    } else {\n        Image::parse(context, input).map(Some)  // tail call\n    }\n}\n```\n\n```{rust,ignore}\n// [ <length> | <percentage> ] [ <length> | <percentage> ]?\nfn parse_border_spacing(_context: &ParserContext, input: &mut Parser)\n                          -> Result<(LengthOrPercentage, LengthOrPercentage), ()> {\n    let first = try!(LengthOrPercentage::parse);\n    let second = input.try(LengthOrPercentage::parse).unwrap_or(first);\n    (first, second)\n}\n```\n\n*/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":331,"byte_end":2300,"line_start":11,"line_end":67,"column_start":1,"column_end":3}},{"value":"recursion_limit = \"200\"","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\lib.rs","byte_start":2302,"byte_end":2327,"line_start":69,"line_end":69,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9347,"byte_end":9370,"line_start":133,"line_end":133,"column_start":8,"column_end":31},"name":"_internal__to_lowercase","qualname":"::macros::_internal__to_lowercase","value":"pub fn _internal__to_lowercase<'a>(&'a mut [u8], &'a str) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Implementation detail of match_ignore_ascii_case! and ascii_case_insensitive_phf_map! macros.","sig":null,"attributes":[{"value":"/ Implementation detail of match_ignore_ascii_case! and ascii_case_insensitive_phf_map! macros.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":8942,"byte_end":9039,"line_start":125,"line_end":125,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9040,"byte_end":9043,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ **This function is not part of the public API. It can change or be removed between any verisons.**","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9044,"byte_end":9146,"line_start":127,"line_end":127,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9147,"byte_end":9150,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ If `input` is larger than buffer, return `None`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9151,"byte_end":9203,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ Otherwise, return `input` ASCII-lowercased, using `buffer` as temporary space if necessary.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9204,"byte_end":9299,"line_start":130,"line_end":130,"column_start":1,"column_end":96}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\macros.rs","byte_start":9315,"byte_end":9339,"line_start":132,"line_end":132,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11132,"byte_end":11147,"line_start":18,"line_end":18,"column_start":8,"column_end":23},"name":"parse_important","qualname":"::rules_and_declarations::parse_important","value":"pub fn parse_important<'i, 't>(&mut Parser) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse `!important`.","sig":null,"attributes":[{"value":"/ Parse `!important`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":10970,"byte_end":10993,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":10994,"byte_end":10997,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Typical usage is `input.try(parse_important).is_ok()`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":10998,"byte_end":11055,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ at the end of a `DeclarationParser::parse_value` implementation.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11056,"byte_end":11124,"line_start":17,"line_end":17,"column_start":1,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11731,"byte_end":11743,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"WithoutBlock","qualname":"::rules_and_declarations::AtRuleType::WithoutBlock","value":"AtRuleType::WithoutBlock(R)","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The at-rule is expected to end with a `;` semicolon. Example: `@import`.","sig":null,"attributes":[{"value":"/ The at-rule is expected to end with a `;` semicolon. Example: `@import`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11499,"byte_end":11575,"line_start":28,"line_end":28,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11580,"byte_end":11583,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The value is the finished representation of an at-rule","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11588,"byte_end":11646,"line_start":30,"line_end":30,"column_start":5,"column_end":63}},{"value":"/ as returned by `RuleListParser::next` or `DeclarationListParser::next`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11651,"byte_end":11726,"line_start":31,"line_end":31,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11921,"byte_end":11930,"line_start":37,"line_end":37,"column_start":5,"column_end":14},"name":"WithBlock","qualname":"::rules_and_declarations::AtRuleType::WithBlock","value":"AtRuleType::WithBlock(P)","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`","sig":null,"attributes":[{"value":"/ The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11753,"byte_end":11833,"line_start":34,"line_end":34,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11838,"byte_end":11841,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ The value is the representation of the \"prelude\" part of the rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11846,"byte_end":11916,"line_start":36,"line_end":36,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12194,"byte_end":12207,"line_start":44,"line_end":44,"column_start":5,"column_end":18},"name":"OptionalBlock","qualname":"::rules_and_declarations::AtRuleType::OptionalBlock","value":"AtRuleType::OptionalBlock(P)","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The at-rule may either have a block or end with a semicolon.","sig":null,"attributes":[{"value":"/ The at-rule may either have a block or end with a semicolon.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11940,"byte_end":12004,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12009,"byte_end":12012,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ This is mostly for testing. As of this writing no real CSS at-rule behaves like this.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12017,"byte_end":12106,"line_start":41,"line_end":41,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12111,"byte_end":12114,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ The value is the representation of the \"prelude\" part of the rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12119,"byte_end":12189,"line_start":43,"line_end":43,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11476,"byte_end":11486,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"AtRuleType","qualname":"::rules_and_declarations::AtRuleType","value":"pub enum AtRuleType<P, R> {\n\n    /// The at-rule is expected to end with a `;` semicolon. Example: `@import`.\n    ///\n    /// The value is the finished representation of an at-rule\n    /// as returned by `RuleListParser::next` or `DeclarationListParser::next`.\n    WithoutBlock(R),\n\n    /// The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`\n    ///\n    /// The value is the representation of the \"prelude\" part of the rule.\n    WithBlock(P),\n\n    /// The at-rule may either have a block or end with a semicolon.\n    ///\n    /// This is mostly for testing. As of this writing no real CSS at-rule behaves like this.\n    ///\n    /// The value is the representation of the \"prelude\" part of the rule.\n    OptionalBlock(P),\n}","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85}],"decl_id":null,"docs":" The return value for `AtRuleParser::parse_prelude`.\n Indicates whether the at-rule is expected to have a `{ /* ... */ }` block\n or end with a `;` semicolon.\n","sig":null,"attributes":[{"value":"/ The return value for `AtRuleParser::parse_prelude`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11300,"byte_end":11355,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/ Indicates whether the at-rule is expected to have a `{ /* ... */ }` block","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11356,"byte_end":11433,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ or end with a `;` semicolon.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":11434,"byte_end":11466,"line_start":26,"line_end":26,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12437,"byte_end":12454,"line_start":51,"line_end":51,"column_start":11,"column_end":28},"name":"DeclarationParser","qualname":"::rules_and_declarations::DeclarationParser","value":"DeclarationParser<'i>","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" A trait to provide various parsing of declaration values.","sig":null,"attributes":[{"value":"/ A trait to provide various parsing of declaration values.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12215,"byte_end":12276,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12277,"byte_end":12280,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ For example, there could be different implementations for property declarations in style rules","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12281,"byte_end":12379,"line_start":49,"line_end":49,"column_start":1,"column_end":99}},{"value":"/ and for descriptors in `@font-face` rules.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12380,"byte_end":12426,"line_start":50,"line_end":50,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12524,"byte_end":12535,"line_start":53,"line_end":53,"column_start":10,"column_end":21},"name":"Declaration","qualname":"::rules_and_declarations::DeclarationParser::Declaration","value":"type Declaration;","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" The finished representation of a declaration.\n","sig":null,"attributes":[{"value":"/ The finished representation of a declaration.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12465,"byte_end":12514,"line_start":52,"line_end":52,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12633,"byte_end":12638,"line_start":56,"line_end":56,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::DeclarationParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[{"value":"/ The error type that is included in the ParseError value that can be returned.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12542,"byte_end":12623,"line_start":55,"line_end":55,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13560,"byte_end":13571,"line_start":75,"line_end":75,"column_start":8,"column_end":19},"name":"parse_value","qualname":"::rules_and_declarations::DeclarationParser::parse_value","value":"pub fn parse_value<'t>(&mut Self, CompactCowStr, &mut Parser)\n-> Result<Self::Declaration, ParseError>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Parse the value of a declaration with the given `name`.","sig":null,"attributes":[{"value":"/ Parse the value of a declaration with the given `name`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12649,"byte_end":12708,"line_start":58,"line_end":58,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12713,"byte_end":12716,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Return the finished representation for the declaration","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12721,"byte_end":12779,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/ as returned by `DeclarationListParser::next`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12784,"byte_end":12833,"line_start":61,"line_end":61,"column_start":5,"column_end":54}},{"value":"/ or `Err(())` to ignore the entire declaration as invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12838,"byte_end":12899,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12904,"byte_end":12907,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Declaration name matching should be case-insensitive in the ASCII range.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12912,"byte_end":12988,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ This can be done with `std::ascii::Ascii::eq_ignore_ascii_case`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":12993,"byte_end":13061,"line_start":65,"line_end":65,"column_start":5,"column_end":73}},{"value":"/ or with the `match_ignore_ascii_case!` macro.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13066,"byte_end":13115,"line_start":66,"line_end":66,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13120,"byte_end":13123,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The given `input` is a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13128,"byte_end":13173,"line_start":68,"line_end":68,"column_start":5,"column_end":50}},{"value":"/ that ends wherever the declaration value should end.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13178,"byte_end":13234,"line_start":69,"line_end":69,"column_start":5,"column_end":61}},{"value":"/ (In declaration lists, before the next semicolon or end of the current block.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13239,"byte_end":13321,"line_start":70,"line_end":70,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13326,"byte_end":13329,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ If `!important` can be used in a given context,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13334,"byte_end":13385,"line_start":72,"line_end":72,"column_start":5,"column_end":56}},{"value":"/ `input.try(parse_important).is_ok()` should be used at the end","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13390,"byte_end":13456,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ of the implementation of this method and the result should be part of the return value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13461,"byte_end":13552,"line_start":74,"line_end":74,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14179,"byte_end":14191,"line_start":88,"line_end":88,"column_start":11,"column_end":23},"name":"AtRuleParser","qualname":"::rules_and_declarations::AtRuleParser","value":"AtRuleParser<'i>","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103}],"decl_id":null,"docs":" A trait to provide various parsing of at-rules.","sig":null,"attributes":[{"value":"/ A trait to provide various parsing of at-rules.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13725,"byte_end":13776,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13777,"byte_end":13780,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For example, there could be different implementations for top-level at-rules","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13781,"byte_end":13861,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ (`@media`, `@font-face`, …)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13862,"byte_end":13895,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/ and for page-margin rules inside `@page`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13896,"byte_end":13941,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13942,"byte_end":13945,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Default implementations that reject all at-rules are provided,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":13946,"byte_end":14012,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/ so that `impl AtRuleParser<(), ()> for ... {}` can be used","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14013,"byte_end":14075,"line_start":86,"line_end":86,"column_start":1,"column_end":63}},{"value":"/ for using `DeclarationListParser` to parse a declartions list with only qualified rules.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14076,"byte_end":14168,"line_start":87,"line_end":87,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14270,"byte_end":14277,"line_start":90,"line_end":90,"column_start":10,"column_end":17},"name":"Prelude","qualname":"::rules_and_declarations::AtRuleParser::Prelude","value":"type Prelude;","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" The intermediate representation of an at-rule prelude.\n","sig":null,"attributes":[{"value":"/ The intermediate representation of an at-rule prelude.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14202,"byte_end":14260,"line_start":89,"line_end":89,"column_start":5,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14340,"byte_end":14346,"line_start":93,"line_end":93,"column_start":10,"column_end":16},"name":"AtRule","qualname":"::rules_and_declarations::AtRuleParser::AtRule","value":"type AtRule;","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" The finished representation of an at-rule.\n","sig":null,"attributes":[{"value":"/ The finished representation of an at-rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14284,"byte_end":14330,"line_start":92,"line_end":92,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14444,"byte_end":14449,"line_start":96,"line_end":96,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::AtRuleParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[{"value":"/ The error type that is included in the ParseError value that can be returned.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14353,"byte_end":14434,"line_start":95,"line_end":95,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15272,"byte_end":15285,"line_start":115,"line_end":115,"column_start":8,"column_end":21},"name":"parse_prelude","qualname":"::rules_and_declarations::AtRuleParser::parse_prelude","value":"pub fn parse_prelude<'t>(&mut Self, CompactCowStr, &mut Parser)\n-> Result<AtRuleType<Self::Prelude, Self::AtRule>, ParseError>","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Parse the prelude of an at-rule with the given `name`.","sig":null,"attributes":[{"value":"/ Parse the prelude of an at-rule with the given `name`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14460,"byte_end":14518,"line_start":98,"line_end":98,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14523,"byte_end":14526,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Return the representation of the prelude and the type of at-rule,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14531,"byte_end":14600,"line_start":100,"line_end":100,"column_start":5,"column_end":74}},{"value":"/ or `Err(())` to ignore the entire at-rule as invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14605,"byte_end":14662,"line_start":101,"line_end":101,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14667,"byte_end":14670,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ See `AtRuleType`’s documentation for the return value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14675,"byte_end":14735,"line_start":103,"line_end":103,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14740,"byte_end":14743,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The prelude is the part after the at-keyword","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14748,"byte_end":14796,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ and before the `;` semicolon or `{ /* ... */ }` block.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14801,"byte_end":14859,"line_start":106,"line_end":106,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14864,"byte_end":14867,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ At-rule name matching should be case-insensitive in the ASCII range.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14872,"byte_end":14944,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ This can be done with `std::ascii::Ascii::eq_ignore_ascii_case`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":14949,"byte_end":15017,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/ or with the `match_ignore_ascii_case!` macro.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15022,"byte_end":15071,"line_start":110,"line_end":110,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15076,"byte_end":15079,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ The given `input` is a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15084,"byte_end":15129,"line_start":112,"line_end":112,"column_start":5,"column_end":50}},{"value":"/ that ends wherever the prelude should end.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15134,"byte_end":15180,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"/ (Before the next semicolon, the next `{`, or the end of the current block.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15185,"byte_end":15264,"line_start":114,"line_end":114,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16027,"byte_end":16038,"line_start":130,"line_end":130,"column_start":8,"column_end":19},"name":"parse_block","qualname":"::rules_and_declarations::AtRuleParser::parse_block","value":"pub fn parse_block<'t>(&mut Self, Self::Prelude, &mut Parser)\n-> Result<Self::AtRule, ParseError>","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Parse the content of a `{ /* ... */ }` block for the body of the at-rule.","sig":null,"attributes":[{"value":"/ Parse the content of a `{ /* ... */ }` block for the body of the at-rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15576,"byte_end":15653,"line_start":122,"line_end":122,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15658,"byte_end":15661,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Return the finished representation of the at-rule","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15666,"byte_end":15719,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/ as returned by `RuleListParser::next` or `DeclarationListParser::next`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15724,"byte_end":15799,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/ or `Err(())` to ignore the entire at-rule as invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15804,"byte_end":15861,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15866,"byte_end":15869,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This is only called when `parse_prelude` returned `WithBlock` or `OptionalBlock`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15874,"byte_end":15959,"line_start":128,"line_end":128,"column_start":5,"column_end":90}},{"value":"/ and a block was indeed found following the prelude.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":15964,"byte_end":16019,"line_start":129,"line_end":129,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16529,"byte_end":16547,"line_start":141,"line_end":141,"column_start":8,"column_end":26},"name":"rule_without_block","qualname":"::rules_and_declarations::AtRuleParser::rule_without_block","value":"pub fn rule_without_block(&mut Self, Self::Prelude) -> Self::AtRule","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" An `OptionalBlock` prelude was followed by `;`.","sig":null,"attributes":[{"value":"/ An `OptionalBlock` prelude was followed by `;`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16306,"byte_end":16357,"line_start":137,"line_end":137,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16362,"byte_end":16365,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Convert the prelude into the finished representation of the at-rule","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16370,"byte_end":16441,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ as returned by `RuleListParser::next` or `DeclarationListParser::next`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16446,"byte_end":16521,"line_start":140,"line_end":140,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17397,"byte_end":17416,"line_start":158,"line_end":158,"column_start":11,"column_end":30},"name":"QualifiedRuleParser","qualname":"::rules_and_declarations::QualifiedRuleParser","value":"QualifiedRuleParser<'i>","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111}],"decl_id":null,"docs":" A trait to provide various parsing of qualified rules.","sig":null,"attributes":[{"value":"/ A trait to provide various parsing of qualified rules.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16810,"byte_end":16868,"line_start":148,"line_end":148,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16869,"byte_end":16872,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ For example, there could be different implementations","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16873,"byte_end":16930,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/ for top-level qualified rules (i.e. style rules with Selectors as prelude)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":16931,"byte_end":17009,"line_start":151,"line_end":151,"column_start":1,"column_end":79}},{"value":"/ and for qualified rules inside `@keyframes` (keyframe rules with keyframe selectors as prelude).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17010,"byte_end":17110,"line_start":152,"line_end":152,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17111,"byte_end":17114,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Default implementations that reject all qualified rules are provided,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17115,"byte_end":17188,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/ so that `impl QualifiedRuleParser<(), ()> for ... {}` can be used","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17189,"byte_end":17258,"line_start":155,"line_end":155,"column_start":1,"column_end":70}},{"value":"/ for example for using `RuleListParser` to parse a rule list with only at-rules","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17259,"byte_end":17341,"line_start":156,"line_end":156,"column_start":1,"column_end":83}},{"value":"/ (such as inside `@font-feature-values`).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17342,"byte_end":17386,"line_start":157,"line_end":157,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17501,"byte_end":17508,"line_start":160,"line_end":160,"column_start":10,"column_end":17},"name":"Prelude","qualname":"::rules_and_declarations::QualifiedRuleParser::Prelude","value":"type Prelude;","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The intermediate representation of a qualified rule prelude.\n","sig":null,"attributes":[{"value":"/ The intermediate representation of a qualified rule prelude.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17427,"byte_end":17491,"line_start":159,"line_end":159,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17577,"byte_end":17590,"line_start":163,"line_end":163,"column_start":10,"column_end":23},"name":"QualifiedRule","qualname":"::rules_and_declarations::QualifiedRuleParser::QualifiedRule","value":"type QualifiedRule;","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The finished representation of a qualified rule.\n","sig":null,"attributes":[{"value":"/ The finished representation of a qualified rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17515,"byte_end":17567,"line_start":162,"line_end":162,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17688,"byte_end":17693,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Error","qualname":"::rules_and_declarations::QualifiedRuleParser::Error","value":"type Error: 'i;","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The error type that is included in the ParseError value that can be returned.\n","sig":null,"attributes":[{"value":"/ The error type that is included in the ParseError value that can be returned.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17597,"byte_end":17678,"line_start":165,"line_end":165,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18119,"byte_end":18132,"line_start":177,"line_end":177,"column_start":8,"column_end":21},"name":"parse_prelude","qualname":"::rules_and_declarations::QualifiedRuleParser::parse_prelude","value":"pub fn parse_prelude<'t>(&mut Self, &mut Parser)\n-> Result<Self::Prelude, ParseError>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Parse the prelude of a qualified rule. For style rules, this is as Selector list.","sig":null,"attributes":[{"value":"/ Parse the prelude of a qualified rule. For style rules, this is as Selector list.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17704,"byte_end":17789,"line_start":168,"line_end":168,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17794,"byte_end":17797,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Return the representation of the prelude,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17802,"byte_end":17847,"line_start":170,"line_end":170,"column_start":5,"column_end":50}},{"value":"/ or `Err(())` to ignore the entire at-rule as invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17852,"byte_end":17909,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17914,"byte_end":17917,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The prelude is the part before the `{ /* ... */ }` block.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17922,"byte_end":17983,"line_start":173,"line_end":173,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17988,"byte_end":17991,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The given `input` is a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":17996,"byte_end":18041,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/ that ends where the prelude should end (before the next `{`).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18046,"byte_end":18111,"line_start":176,"line_end":176,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18635,"byte_end":18646,"line_start":188,"line_end":188,"column_start":8,"column_end":19},"name":"parse_block","qualname":"::rules_and_declarations::QualifiedRuleParser::parse_block","value":"pub fn parse_block<'t>(&mut Self, Self::Prelude, &mut Parser)\n-> Result<Self::QualifiedRule, ParseError>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.","sig":null,"attributes":[{"value":"/ Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18361,"byte_end":18445,"line_start":183,"line_end":183,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18450,"byte_end":18453,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Return the finished representation of the qualified rule","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18458,"byte_end":18518,"line_start":185,"line_end":185,"column_start":5,"column_end":65}},{"value":"/ as returned by `RuleListParser::next`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18523,"byte_end":18565,"line_start":186,"line_end":186,"column_start":5,"column_end":47}},{"value":"/ or `Err(())` to ignore the entire at-rule as invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18570,"byte_end":18627,"line_start":187,"line_end":187,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18993,"byte_end":19014,"line_start":198,"line_end":198,"column_start":12,"column_end":33},"name":"DeclarationListParser","qualname":"::rules_and_declarations::DeclarationListParser","value":"DeclarationListParser { input, parser }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" Provides an iterator for declaration list parsing.\n","sig":null,"attributes":[{"value":"/ Provides an iterator for declaration list parsing.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":18927,"byte_end":18981,"line_start":197,"line_end":197,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19104,"byte_end":19109,"line_start":200,"line_end":200,"column_start":9,"column_end":14},"name":"input","qualname":"::rules_and_declarations::DeclarationListParser::input","value":"&'a mut parser::Parser<'i, 't>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" The input given to `DeclarationListParser::new`\n","sig":null,"attributes":[{"value":"/ The input given to `DeclarationListParser::new`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19044,"byte_end":19095,"line_start":199,"line_end":199,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19201,"byte_end":19207,"line_start":203,"line_end":203,"column_start":9,"column_end":15},"name":"parser","qualname":"::rules_and_declarations::DeclarationListParser::parser","value":"P","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" The parser given to `DeclarationListParser::new`\n","sig":null,"attributes":[{"value":"/ The parser given to `DeclarationListParser::new`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19140,"byte_end":19192,"line_start":202,"line_end":202,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":20184,"byte_end":20187,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"new","qualname":"<DeclarationListParser>::new","value":"pub fn new(&'a mut Parser, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeclarationListParser` for the given `input` and `parser`.","sig":null,"attributes":[{"value":"/ Create a new `DeclarationListParser` for the given `input` and `parser`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19407,"byte_end":19483,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19488,"byte_end":19491,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ Note that all CSS declaration lists can on principle contain at-rules.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19496,"byte_end":19570,"line_start":212,"line_end":212,"column_start":5,"column_end":79}},{"value":"/ Even if no such valid at-rule exists (yet),","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19575,"byte_end":19622,"line_start":213,"line_end":213,"column_start":5,"column_end":52}},{"value":"/ this affects error handling: at-rules end at `{}` blocks, not just semicolons.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19627,"byte_end":19709,"line_start":214,"line_end":214,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19714,"byte_end":19717,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The given `parser` therefore needs to implement","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19722,"byte_end":19773,"line_start":216,"line_end":216,"column_start":5,"column_end":56}},{"value":"/ both `DeclarationParser` and `AtRuleParser` traits.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19778,"byte_end":19833,"line_start":217,"line_end":217,"column_start":5,"column_end":60}},{"value":"/ However, the latter can be an empty `impl`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19838,"byte_end":19884,"line_start":218,"line_end":218,"column_start":5,"column_end":51}},{"value":"/ since `AtRuleParser` provides default implementations of its methods.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19889,"byte_end":19962,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19967,"byte_end":19970,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The return type for finished declarations and at-rules also needs to be the same,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19975,"byte_end":20060,"line_start":221,"line_end":221,"column_start":5,"column_end":90}},{"value":"/ since `<DeclarationListParser as Iterator>::next` can return either.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":20065,"byte_end":20137,"line_start":222,"line_end":222,"column_start":5,"column_end":77}},{"value":"/ It could be a custom enum.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":20142,"byte_end":20172,"line_start":223,"line_end":223,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22489,"byte_end":22503,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"RuleListParser","qualname":"::rules_and_declarations::RuleListParser","value":"RuleListParser { input, parser }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Provides an iterator for rule list parsing.\n","sig":null,"attributes":[{"value":"/ Provides an iterator for rule list parsing.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22430,"byte_end":22477,"line_start":275,"line_end":275,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22586,"byte_end":22591,"line_start":278,"line_end":278,"column_start":9,"column_end":14},"name":"input","qualname":"::rules_and_declarations::RuleListParser::input","value":"&'a mut parser::Parser<'i, 't>","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" The input given to `RuleListParser::new`\n","sig":null,"attributes":[{"value":"/ The input given to `RuleListParser::new`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22533,"byte_end":22577,"line_start":277,"line_end":277,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22676,"byte_end":22682,"line_start":281,"line_end":281,"column_start":9,"column_end":15},"name":"parser","qualname":"::rules_and_declarations::RuleListParser::parser","value":"P","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" The parser given to `RuleListParser::new`\n","sig":null,"attributes":[{"value":"/ The parser given to `RuleListParser::new`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22622,"byte_end":22667,"line_start":280,"line_end":280,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23508,"byte_end":23526,"line_start":301,"line_end":301,"column_start":12,"column_end":30},"name":"new_for_stylesheet","qualname":"<RuleListParser>::new_for_stylesheet","value":"pub fn new_for_stylesheet(&'a mut Parser, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet\n and the given `parser`.","sig":null,"attributes":[{"value":"/ Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22932,"byte_end":23020,"line_start":291,"line_end":291,"column_start":5,"column_end":93}},{"value":"/ and the given `parser`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23025,"byte_end":23052,"line_start":292,"line_end":292,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23057,"byte_end":23060,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ The given `parser` needs to implement both `QualifiedRuleParser` and `AtRuleParser` traits.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23065,"byte_end":23160,"line_start":294,"line_end":294,"column_start":5,"column_end":100}},{"value":"/ However, either of them can be an empty `impl`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23165,"byte_end":23215,"line_start":295,"line_end":295,"column_start":5,"column_end":55}},{"value":"/ since the traits provide default implementations of their methods.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23220,"byte_end":23290,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23295,"byte_end":23298,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ The return type for finished qualified rules and at-rules also needs to be the same,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23303,"byte_end":23391,"line_start":298,"line_end":298,"column_start":5,"column_end":93}},{"value":"/ since `<RuleListParser as Iterator>::next` can return either.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23396,"byte_end":23461,"line_start":299,"line_end":299,"column_start":5,"column_end":70}},{"value":"/ It could be a custom enum.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23466,"byte_end":23496,"line_start":300,"line_end":300,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":24096,"byte_end":24115,"line_start":316,"line_end":316,"column_start":12,"column_end":31},"name":"new_for_nested_rule","qualname":"<RuleListParser>::new_for_nested_rule","value":"pub fn new_for_nested_rule(&'a mut Parser, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same is `new_for_stylesheet`, but should be used for rule lists inside a block\n such as the body of an `@media` rule.","sig":null,"attributes":[{"value":"/ Same is `new_for_stylesheet`, but should be used for rule lists inside a block","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23748,"byte_end":23830,"line_start":310,"line_end":310,"column_start":5,"column_end":87}},{"value":"/ such as the body of an `@media` rule.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23835,"byte_end":23876,"line_start":311,"line_end":311,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23881,"byte_end":23884,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ This differs in that `<!--` and `-->` tokens","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23889,"byte_end":23937,"line_start":313,"line_end":313,"column_start":5,"column_end":53}},{"value":"/ should only be ignored at the stylesheet top-level.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":23942,"byte_end":23997,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ (This is to deal with legacy work arounds for `<style>` HTML element parsing.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":24002,"byte_end":24084,"line_start":315,"line_end":315,"column_start":5,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":26344,"byte_end":26365,"line_start":367,"line_end":367,"column_start":8,"column_end":29},"name":"parse_one_declaration","qualname":"::rules_and_declarations::parse_one_declaration","value":"pub fn parse_one_declaration<'i, 't, P, E>(&mut Parser, &mut P)\n-> Result<<P as DeclarationParser>::Declaration, PreciseParseError> where\nP: DeclarationParser<Error = E>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude.\n","sig":null,"attributes":[{"value":"/ Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":26239,"byte_end":26336,"line_start":366,"line_end":366,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":27074,"byte_end":27088,"line_start":384,"line_end":384,"column_start":8,"column_end":22},"name":"parse_one_rule","qualname":"::rules_and_declarations::parse_one_rule","value":"pub fn parse_one_rule<'i, 't, R, P, E>(&mut Parser, &mut P)\n-> Result<R, ParseError> where P: QualifiedRuleParser<QualifiedRule = R, Error\n= R> + AtRuleParser<AtRule = R, Error = R>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`.\n","sig":null,"attributes":[{"value":"/ Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":26992,"byte_end":27066,"line_start":383,"line_end":383,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":27928,"byte_end":27945,"line_start":405,"line_end":405,"column_start":12,"column_end":29},"name":"PreciseParseError","qualname":"::rules_and_declarations::PreciseParseError","value":"PreciseParseError { error, span }","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":27967,"byte_end":27972,"line_start":406,"line_end":406,"column_start":9,"column_end":14},"name":"error","qualname":"::rules_and_declarations::PreciseParseError::error","value":"parser::ParseError<'i, E>","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":28001,"byte_end":28005,"line_start":407,"line_end":407,"column_start":9,"column_end":13},"name":"span","qualname":"::rules_and_declarations::PreciseParseError::span","value":"std::ops::Range<parser::SourcePosition>","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":942},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561538,"byte_end":7561543,"line_start":7,"line_end":7,"column_start":2,"column_end":7},"name":"Ident","qualname":"::tokenizer::Token::Ident","value":"Token::Ident(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<ident-token>`](https://drafts.csswg.org/css-syntax/#ident-token-diagram)\n","sig":null,"attributes":[{"value":"/ A [`<ident-token>`](https://drafts.csswg.org/css-syntax/#ident-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561455,"byte_end":7561536,"line_start":6,"line_end":6,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":945},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561717,"byte_end":7561726,"line_start":10,"line_end":10,"column_start":2,"column_end":11},"name":"AtKeyword","qualname":"::tokenizer::Token::AtKeyword","value":"Token::AtKeyword(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<at-keyword-token>`](https://drafts.csswg.org/css-syntax/#at-keyword-token-diagram)","sig":null,"attributes":[{"value":"/ A [`<at-keyword-token>`](https://drafts.csswg.org/css-syntax/#at-keyword-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561571,"byte_end":7561662,"line_start":7,"line_end":7,"column_start":35,"column_end":126}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561664,"byte_end":7561667,"line_start":8,"line_end":8,"column_start":2,"column_end":5}},{"value":"/ The value does not include the `@` marker.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561669,"byte_end":7561715,"line_start":9,"line_end":9,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561929,"byte_end":7561933,"line_start":13,"line_end":13,"column_start":2,"column_end":6},"name":"Hash","qualname":"::tokenizer::Token::Hash","value":"Token::Hash(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"","sig":null,"attributes":[{"value":"/ A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561754,"byte_end":7561874,"line_start":10,"line_end":10,"column_start":39,"column_end":159}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561876,"byte_end":7561879,"line_start":11,"line_end":11,"column_start":2,"column_end":5}},{"value":"/ The value does not include the `#` marker.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561881,"byte_end":7561927,"line_start":12,"line_end":12,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":951},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562126,"byte_end":7562132,"line_start":16,"line_end":16,"column_start":2,"column_end":8},"name":"IDHash","qualname":"::tokenizer::Token::IDHash","value":"Token::IDHash(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"id\"","sig":null,"attributes":[{"value":"/ A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"id\"","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561961,"byte_end":7562071,"line_start":13,"line_end":13,"column_start":34,"column_end":144}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562073,"byte_end":7562076,"line_start":14,"line_end":14,"column_start":2,"column_end":5}},{"value":"/ The value does not include the `#` marker.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562078,"byte_end":7562124,"line_start":15,"line_end":15,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":954},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562294,"byte_end":7562306,"line_start":19,"line_end":19,"column_start":2,"column_end":14},"name":"QuotedString","qualname":"::tokenizer::Token::QuotedString","value":"Token::QuotedString(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<string-token>`](https://drafts.csswg.org/css-syntax/#string-token-diagram)","sig":null,"attributes":[{"value":"/ A [`<string-token>`](https://drafts.csswg.org/css-syntax/#string-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562160,"byte_end":7562243,"line_start":16,"line_end":16,"column_start":36,"column_end":119}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562245,"byte_end":7562248,"line_start":17,"line_end":17,"column_start":2,"column_end":5}},{"value":"/ The value does not include the quotes.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562250,"byte_end":7562292,"line_start":18,"line_end":18,"column_start":2,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":957},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562524,"byte_end":7562535,"line_start":22,"line_end":22,"column_start":2,"column_end":13},"name":"UnquotedUrl","qualname":"::tokenizer::Token::UnquotedUrl","value":"Token::UnquotedUrl(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<url-token>`](https://drafts.csswg.org/css-syntax/#url-token-diagram) or `url( <string-token> )` function","sig":null,"attributes":[{"value":"/ A [`<url-token>`](https://drafts.csswg.org/css-syntax/#url-token-diagram) or `url( <string-token> )` function","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562334,"byte_end":7562447,"line_start":19,"line_end":19,"column_start":42,"column_end":155}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562449,"byte_end":7562452,"line_start":20,"line_end":20,"column_start":2,"column_end":5}},{"value":"/ The value does not include the `url(` `)` markers or the quotes.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562454,"byte_end":7562522,"line_start":21,"line_end":21,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":960},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562586,"byte_end":7562591,"line_start":23,"line_end":23,"column_start":2,"column_end":7},"name":"Delim","qualname":"::tokenizer::Token::Delim","value":"Token::Delim(char)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<delim-token>`\n","sig":null,"attributes":[{"value":"/ A `<delim-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562563,"byte_end":7562584,"line_start":22,"line_end":22,"column_start":41,"column_end":62}}]},{"kind":"StructVariant","id":{"krate":0,"index":963},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562688,"byte_end":7562694,"line_start":24,"line_end":24,"column_start":2,"column_end":8},"name":"Number","qualname":"::tokenizer::Token::Number","value":"Token::Number { has_sign, value, int_value }","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<number-token>`](https://drafts.csswg.org/css-syntax/#number-token-diagram)\n","sig":null,"attributes":[{"value":"/ A [`<number-token>`](https://drafts.csswg.org/css-syntax/#number-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7562603,"byte_end":7562686,"line_start":23,"line_end":23,"column_start":19,"column_end":102}}]},{"kind":"StructVariant","id":{"krate":0,"index":967},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7563113,"byte_end":7563123,"line_start":32,"line_end":32,"column_start":2,"column_end":12},"name":"Percentage","qualname":"::tokenizer::Token::Percentage","value":"Token::Percentage { has_sign, unit_value, int_value }","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<percentage-token>`](https://drafts.csswg.org/css-syntax/#percentage-token-diagram)\n","sig":null,"attributes":[{"value":"/ A [`<percentage-token>`](https://drafts.csswg.org/css-syntax/#percentage-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7563020,"byte_end":7563111,"line_start":31,"line_end":31,"column_start":5,"column_end":96}}]},{"kind":"StructVariant","id":{"krate":0,"index":971},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7563538,"byte_end":7563547,"line_start":39,"line_end":39,"column_start":2,"column_end":11},"name":"Dimension","qualname":"::tokenizer::Token::Dimension","value":"Token::Dimension { has_sign, value, int_value, unit }","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<dimension-token>`](https://drafts.csswg.org/css-syntax/#dimension-token-diagram)\n","sig":null,"attributes":[{"value":"/ A [`<dimension-token>`](https://drafts.csswg.org/css-syntax/#dimension-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7563447,"byte_end":7563536,"line_start":38,"line_end":38,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":976},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564029,"byte_end":7564039,"line_start":48,"line_end":48,"column_start":2,"column_end":12},"name":"WhiteSpace","qualname":"::tokenizer::Token::WhiteSpace","value":"Token::WhiteSpace(&'a str)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<whitespace-token>`](https://drafts.csswg.org/css-syntax/#whitespace-token-diagram)\n","sig":null,"attributes":[{"value":"/ A [`<whitespace-token>`](https://drafts.csswg.org/css-syntax/#whitespace-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7563936,"byte_end":7564027,"line_start":47,"line_end":47,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":979},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564263,"byte_end":7564270,"line_start":54,"line_end":54,"column_start":2,"column_end":9},"name":"Comment","qualname":"::tokenizer::Token::Comment","value":"Token::Comment(&'a str)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A comment.","sig":null,"attributes":[{"value":"/ A comment.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564055,"byte_end":7564069,"line_start":48,"line_end":48,"column_start":28,"column_end":42}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564071,"byte_end":7564074,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ The CSS Syntax spec does not generate tokens for comments,","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564076,"byte_end":7564138,"line_start":50,"line_end":50,"column_start":2,"column_end":64}},{"value":"/ But we do, because we can (borrowed &str makes it cheap).","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564140,"byte_end":7564201,"line_start":51,"line_end":51,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564203,"byte_end":7564206,"line_start":52,"line_end":52,"column_start":2,"column_end":5}},{"value":"/ The value does not include the `/*` `*/` markers.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564208,"byte_end":7564261,"line_start":53,"line_end":53,"column_start":2,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":982},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564313,"byte_end":7564318,"line_start":55,"line_end":55,"column_start":2,"column_end":7},"name":"Colon","qualname":"::tokenizer::Token::Colon","value":"Token::Colon","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `:` `<colon-token>`\n","sig":null,"attributes":[{"value":"/ A `:` `<colon-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564286,"byte_end":7564311,"line_start":54,"line_end":54,"column_start":25,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564352,"byte_end":7564361,"line_start":56,"line_end":56,"column_start":2,"column_end":11},"name":"Semicolon","qualname":"::tokenizer::Token::Semicolon","value":"Token::Semicolon","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `;` `<semicolon-token>`\n","sig":null,"attributes":[{"value":"/ A `;` `<semicolon-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564321,"byte_end":7564350,"line_start":55,"line_end":55,"column_start":10,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":986},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564391,"byte_end":7564396,"line_start":57,"line_end":57,"column_start":2,"column_end":7},"name":"Comma","qualname":"::tokenizer::Token::Comma","value":"Token::Comma","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `,` `<comma-token>`\n","sig":null,"attributes":[{"value":"/ A `,` `<comma-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564364,"byte_end":7564389,"line_start":56,"line_end":56,"column_start":14,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564503,"byte_end":7564515,"line_start":58,"line_end":58,"column_start":2,"column_end":14},"name":"IncludeMatch","qualname":"::tokenizer::Token::IncludeMatch","value":"Token::IncludeMatch","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `~=` [`<include-match-token>`](https://drafts.csswg.org/css-syntax/#include-match-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `~=` [`<include-match-token>`](https://drafts.csswg.org/css-syntax/#include-match-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564399,"byte_end":7564501,"line_start":57,"line_end":57,"column_start":10,"column_end":112}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564616,"byte_end":7564625,"line_start":59,"line_end":59,"column_start":2,"column_end":11},"name":"DashMatch","qualname":"::tokenizer::Token::DashMatch","value":"Token::DashMatch","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `|=` [`<dash-match-token>`](https://drafts.csswg.org/css-syntax/#dash-match-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `|=` [`<dash-match-token>`](https://drafts.csswg.org/css-syntax/#dash-match-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564518,"byte_end":7564614,"line_start":58,"line_end":58,"column_start":17,"column_end":113}}]},{"kind":"TupleVariant","id":{"krate":0,"index":992},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564730,"byte_end":7564741,"line_start":60,"line_end":60,"column_start":2,"column_end":13},"name":"PrefixMatch","qualname":"::tokenizer::Token::PrefixMatch","value":"Token::PrefixMatch","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `^=` [`<prefix-match-token>`](https://drafts.csswg.org/css-syntax/#prefix-match-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `^=` [`<prefix-match-token>`](https://drafts.csswg.org/css-syntax/#prefix-match-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564628,"byte_end":7564728,"line_start":59,"line_end":59,"column_start":14,"column_end":114}}]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564846,"byte_end":7564857,"line_start":61,"line_end":61,"column_start":2,"column_end":13},"name":"SuffixMatch","qualname":"::tokenizer::Token::SuffixMatch","value":"Token::SuffixMatch","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `$=` [`<suffix-match-token>`](https://drafts.csswg.org/css-syntax/#suffix-match-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `$=` [`<suffix-match-token>`](https://drafts.csswg.org/css-syntax/#suffix-match-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564744,"byte_end":7564844,"line_start":60,"line_end":60,"column_start":16,"column_end":116}}]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564968,"byte_end":7564982,"line_start":62,"line_end":62,"column_start":2,"column_end":16},"name":"SubstringMatch","qualname":"::tokenizer::Token::SubstringMatch","value":"Token::SubstringMatch","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `*=` [`<substring-match-token>`](https://drafts.csswg.org/css-syntax/#substring-match-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `*=` [`<substring-match-token>`](https://drafts.csswg.org/css-syntax/#substring-match-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564860,"byte_end":7564966,"line_start":61,"line_end":61,"column_start":16,"column_end":122}}]},{"kind":"TupleVariant","id":{"krate":0,"index":998},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565075,"byte_end":7565081,"line_start":63,"line_end":63,"column_start":2,"column_end":8},"name":"Column","qualname":"::tokenizer::Token::Column","value":"Token::Column","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `||` [`<column-token>`](https://drafts.csswg.org/css-syntax/#column-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `||` [`<column-token>`](https://drafts.csswg.org/css-syntax/#column-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7564985,"byte_end":7565073,"line_start":62,"line_end":62,"column_start":19,"column_end":107}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565170,"byte_end":7565173,"line_start":64,"line_end":64,"column_start":2,"column_end":5},"name":"CDO","qualname":"::tokenizer::Token::CDO","value":"Token::CDO","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<!--` [`<CDO-token>`](https://drafts.csswg.org/css-syntax/#CDO-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `<!--` [`<CDO-token>`](https://drafts.csswg.org/css-syntax/#CDO-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565084,"byte_end":7565168,"line_start":63,"line_end":63,"column_start":11,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565261,"byte_end":7565264,"line_start":65,"line_end":65,"column_start":2,"column_end":5},"name":"CDC","qualname":"::tokenizer::Token::CDC","value":"Token::CDC","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `-->` [`<CDC-token>`](https://drafts.csswg.org/css-syntax/#CDC-token-diagram)\n","sig":null,"attributes":[{"value":"/ A `-->` [`<CDC-token>`](https://drafts.csswg.org/css-syntax/#CDC-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565176,"byte_end":7565259,"line_start":64,"line_end":64,"column_start":8,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1004},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565416,"byte_end":7565424,"line_start":68,"line_end":68,"column_start":2,"column_end":10},"name":"Function","qualname":"::tokenizer::Token::Function","value":"Token::Function(CompactCowStr)","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A [`<function-token>`](https://drafts.csswg.org/css-syntax/#function-token-diagram)","sig":null,"attributes":[{"value":"/ A [`<function-token>`](https://drafts.csswg.org/css-syntax/#function-token-diagram)","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565267,"byte_end":7565354,"line_start":65,"line_end":65,"column_start":8,"column_end":95}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565356,"byte_end":7565359,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ The value (name) does not include the `(` marker.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565361,"byte_end":7565414,"line_start":67,"line_end":67,"column_start":2,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565471,"byte_end":7565487,"line_start":69,"line_end":69,"column_start":2,"column_end":18},"name":"ParenthesisBlock","qualname":"::tokenizer::Token::ParenthesisBlock","value":"Token::ParenthesisBlock","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<(-token>`\n","sig":null,"attributes":[{"value":"/ A `<(-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565452,"byte_end":7565469,"line_start":68,"line_end":68,"column_start":38,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1009},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565509,"byte_end":7565527,"line_start":70,"line_end":70,"column_start":2,"column_end":20},"name":"SquareBracketBlock","qualname":"::tokenizer::Token::SquareBracketBlock","value":"Token::SquareBracketBlock","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<[-token>`\n","sig":null,"attributes":[{"value":"/ A `<[-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565490,"byte_end":7565507,"line_start":69,"line_end":69,"column_start":21,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565549,"byte_end":7565566,"line_start":71,"line_end":71,"column_start":2,"column_end":19},"name":"CurlyBracketBlock","qualname":"::tokenizer::Token::CurlyBracketBlock","value":"Token::CurlyBracketBlock","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<{-token>`\n","sig":null,"attributes":[{"value":"/ A `<{-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565530,"byte_end":7565547,"line_start":70,"line_end":70,"column_start":23,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1013},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565647,"byte_end":7565653,"line_start":74,"line_end":74,"column_start":2,"column_end":8},"name":"BadUrl","qualname":"::tokenizer::Token::BadUrl","value":"Token::BadUrl","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<bad-url-token>`","sig":null,"attributes":[{"value":"/ A `<bad-url-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565569,"byte_end":7565592,"line_start":71,"line_end":71,"column_start":22,"column_end":45}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565594,"byte_end":7565597,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ This token always indicates a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565599,"byte_end":7565645,"line_start":73,"line_end":73,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1015},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565737,"byte_end":7565746,"line_start":77,"line_end":77,"column_start":2,"column_end":11},"name":"BadString","qualname":"::tokenizer::Token::BadString","value":"Token::BadString","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<bad-string-token>`","sig":null,"attributes":[{"value":"/ A `<bad-string-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565656,"byte_end":7565682,"line_start":74,"line_end":74,"column_start":11,"column_end":37}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565684,"byte_end":7565687,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ This token always indicates a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565689,"byte_end":7565735,"line_start":76,"line_end":76,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565898,"byte_end":7565914,"line_start":81,"line_end":81,"column_start":2,"column_end":18},"name":"CloseParenthesis","qualname":"::tokenizer::Token::CloseParenthesis","value":"Token::CloseParenthesis","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<)-token>`","sig":null,"attributes":[{"value":"/ A `<)-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565749,"byte_end":7565766,"line_start":77,"line_end":77,"column_start":14,"column_end":31}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565768,"byte_end":7565771,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ When obtained from one of the `Parser::next*` methods,","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565773,"byte_end":7565831,"line_start":79,"line_end":79,"column_start":2,"column_end":60}},{"value":"/ this token is always unmatched and indicates a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565833,"byte_end":7565896,"line_start":80,"line_end":80,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1019},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566066,"byte_end":7566084,"line_start":85,"line_end":85,"column_start":2,"column_end":20},"name":"CloseSquareBracket","qualname":"::tokenizer::Token::CloseSquareBracket","value":"Token::CloseSquareBracket","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<]-token>`","sig":null,"attributes":[{"value":"/ A `<]-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565917,"byte_end":7565934,"line_start":81,"line_end":81,"column_start":21,"column_end":38}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565936,"byte_end":7565939,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ When obtained from one of the `Parser::next*` methods,","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7565941,"byte_end":7565999,"line_start":83,"line_end":83,"column_start":2,"column_end":60}},{"value":"/ this token is always unmatched and indicates a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566001,"byte_end":7566064,"line_start":84,"line_end":84,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1021},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566236,"byte_end":7566253,"line_start":89,"line_end":89,"column_start":2,"column_end":19},"name":"CloseCurlyBracket","qualname":"::tokenizer::Token::CloseCurlyBracket","value":"Token::CloseCurlyBracket","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" A `<}-token>`","sig":null,"attributes":[{"value":"/ A `<}-token>`","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566087,"byte_end":7566104,"line_start":85,"line_end":85,"column_start":23,"column_end":40}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566106,"byte_end":7566109,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ When obtained from one of the `Parser::next*` methods,","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566111,"byte_end":7566169,"line_start":87,"line_end":87,"column_start":2,"column_end":60}},{"value":"/ this token is always unmatched and indicates a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566171,"byte_end":7566234,"line_start":88,"line_end":88,"column_start":2,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":940},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561440,"byte_end":7561445,"line_start":5,"line_end":5,"column_start":54,"column_end":59},"name":"Token","qualname":"::tokenizer::Token","value":"pub enum Token<'a> {\n\n    /// A [`<ident-token>`](https://drafts.csswg.org/css-syntax/#ident-token-diagram)\n    Ident(CompactCowStr),\n\n    /// A [`<at-keyword-token>`](https://drafts.csswg.org/css-syntax/#at-keyword-token-diagram)\n    ///\n    /// The value does not include the `@` marker.\n    AtKeyword(CompactCowStr),\n\n    /// A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"\n    ///\n    /// The value does not include the `#` marker.\n    Hash(CompactCowStr),\n\n    /// A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to \"id\"\n    ///\n    /// The value does not include the `#` marker.\n    IDHash(CompactCowStr),\n\n    /// A [`<string-token>`](https://drafts.csswg.org/css-syntax/#string-token-diagram)\n    ///\n    /// The value does not include the quotes.\n    QuotedString(CompactCowStr),\n\n    /// A [`<url-token>`](https://drafts.csswg.org/css-syntax/#url-token-diagram) or `url( <string-token> )` function\n    ///\n    /// The value does not include the `url(` `)` markers or the quotes.\n    UnquotedUrl(CompactCowStr),\n\n    /// A `<delim-token>`\n    Delim(char),\n\n    /// A [`<number-token>`](https://drafts.csswg.org/css-syntax/#number-token-diagram)\n    Number {\n        /// Whether the number had a `+` or `-` sign.\n        ///\n        /// This is used is some cases like the <An+B> micro syntax. (See the `parse_nth` function.)\n        has_sign: bool,\n        /// The value as a float\n        value: f32,\n        /// If the origin source did not include a fractional part, the value as an integer.\n        int_value: Option<i32>,\n    },\n\n    /// A [`<percentage-token>`](https://drafts.csswg.org/css-syntax/#percentage-token-diagram)\n    Percentage {\n        /// Whether the number had a `+` or `-` sign.\n        has_sign: bool,\n        /// The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.\n        unit_value: f32,\n        /// If the origin source did not include a fractional part, the value as an integer.\n        /// It is **not** divided by 100.\n        int_value: Option<i32>,\n    },\n\n    /// A [`<dimension-token>`](https://drafts.csswg.org/css-syntax/#dimension-token-diagram)\n    Dimension {\n        /// Whether the number had a `+` or `-` sign.\n        ///\n        /// This is used is some cases like the <An+B> micro syntax. (See the `parse_nth` function.)\n        has_sign: bool,\n        /// The value as a float\n        value: f32,\n        /// If the origin source did not include a fractional part, the value as an integer.\n        int_value: Option<i32>,\n        /// The unit, e.g. \"px\" in `12px`\n        unit: CompactCowStr,\n    },\n\n    /// A [`<whitespace-token>`](https://drafts.csswg.org/css-syntax/#whitespace-token-diagram)\n    WhiteSpace(&'a str),\n\n    /// A comment.\n    ///\n    /// The CSS Syntax spec does not generate tokens for comments,\n    /// But we do, because we can (borrowed &str makes it cheap).\n    ///\n    /// The value does not include the `/*` `*/` markers.\n    Comment(&'a str),\n\n    /// A `:` `<colon-token>`\n    Colon,\n\n    /// A `;` `<semicolon-token>`\n    Semicolon,\n\n    /// A `,` `<comma-token>`\n    Comma,\n\n    /// A `~=` [`<include-match-token>`](https://drafts.csswg.org/css-syntax/#include-match-token-diagram)\n    IncludeMatch,\n\n    /// A `|=` [`<dash-match-token>`](https://drafts.csswg.org/css-syntax/#dash-match-token-diagram)\n    DashMatch,\n\n    /// A `^=` [`<prefix-match-token>`](https://drafts.csswg.org/css-syntax/#prefix-match-token-diagram)\n    PrefixMatch,\n\n    /// A `$=` [`<suffix-match-token>`](https://drafts.csswg.org/css-syntax/#suffix-match-token-diagram)\n    SuffixMatch,\n\n    /// A `*=` [`<substring-match-token>`](https://drafts.csswg.org/css-syntax/#substring-match-token-diagram)\n    SubstringMatch,\n\n    /// A `||` [`<column-token>`](https://drafts.csswg.org/css-syntax/#column-token-diagram)\n    Column,\n\n    /// A `<!--` [`<CDO-token>`](https://drafts.csswg.org/css-syntax/#CDO-token-diagram)\n    CDO,\n\n    /// A `-->` [`<CDC-token>`](https://drafts.csswg.org/css-syntax/#CDC-token-diagram)\n    CDC,\n\n    /// A [`<function-token>`](https://drafts.csswg.org/css-syntax/#function-token-diagram)\n    ///\n    /// The value (name) does not include the `(` marker.\n    Function(CompactCowStr),\n\n    /// A `<(-token>`\n    ParenthesisBlock,\n\n    /// A `<[-token>`\n    SquareBracketBlock,\n\n    /// A `<{-token>`\n    CurlyBracketBlock,\n\n    /// A `<bad-url-token>`\n    ///\n    /// This token always indicates a parse error.\n    BadUrl,\n\n    /// A `<bad-string-token>`\n    ///\n    /// This token always indicates a parse error.\n    BadString,\n\n    /// A `<)-token>`\n    ///\n    /// When obtained from one of the `Parser::next*` methods,\n    /// this token is always unmatched and indicates a parse error.\n    CloseParenthesis,\n\n    /// A `<]-token>`\n    ///\n    /// When obtained from one of the `Parser::next*` methods,\n    /// this token is always unmatched and indicates a parse error.\n    CloseSquareBracket,\n\n    /// A `<}-token>`\n    ///\n    /// When obtained from one of the `Parser::next*` methods,\n    /// this token is always unmatched and indicates a parse error.\n    CloseCurlyBracket,\n}","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1021}],"decl_id":null,"docs":" One of the pieces the CSS input is broken into.","sig":null,"attributes":[{"value":"/ One of the pieces the CSS input is broken into.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561200,"byte_end":7561251,"line_start":1,"line_end":1,"column_start":183,"column_end":234}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561253,"byte_end":7561256,"line_start":2,"line_end":2,"column_start":2,"column_end":5}},{"value":"/ Some components use `Cow` in order to borrow from the original input string","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561258,"byte_end":7561337,"line_start":3,"line_end":3,"column_start":2,"column_end":81}},{"value":"/ and avoid allocating/copying when possible.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7561339,"byte_end":7561386,"line_start":4,"line_end":4,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566595,"byte_end":7566609,"line_start":97,"line_end":97,"column_start":9,"column_end":23},"name":"is_parse_error","qualname":"<Token>::is_parse_error","value":"pub fn is_parse_error(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether this token represents a parse error.","sig":null,"attributes":[{"value":"/ Return whether this token represents a parse error.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566285,"byte_end":7566340,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566342,"byte_end":7566345,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ `BadUrl` and `BadString` are tokenizer-level parse errors.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566347,"byte_end":7566409,"line_start":93,"line_end":93,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566411,"byte_end":7566414,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ `CloseParenthesis`, `CloseSquareBracket`, and `CloseCurlyBracket` are *unmatched*","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566416,"byte_end":7566501,"line_start":95,"line_end":95,"column_start":2,"column_end":87}},{"value":"/ and therefore parse errors when returned by one of the `Parser::next*` methods.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566503,"byte_end":7566586,"line_start":96,"line_end":96,"column_start":2,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1084},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571492,"byte_end":7571506,"line_start":175,"line_end":175,"column_start":68,"column_end":82},"name":"SourceLocation","qualname":"::tokenizer::SourceLocation","value":"SourceLocation { line, column }","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"decl_id":null,"docs":" The line and column number for a given position within the input.\n","sig":null,"attributes":[{"value":"/ The line and column number for a given position within the input.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571355,"byte_end":7571424,"line_start":174,"line_end":174,"column_start":115,"column_end":184}}]},{"kind":"Field","id":{"krate":0,"index":1085},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571569,"byte_end":7571573,"line_start":177,"line_end":177,"column_start":6,"column_end":10},"name":"line","qualname":"::tokenizer::SourceLocation::line","value":"u32","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":" The line number, starting at 1 for the first line.\n","sig":null,"attributes":[{"value":"/ The line number, starting at 1 for the first line.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571509,"byte_end":7571563,"line_start":176,"line_end":176,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1086},"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571675,"byte_end":7571681,"line_start":178,"line_end":178,"column_start":6,"column_end":12},"name":"column","qualname":"::tokenizer::SourceLocation::column","value":"u32","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":" The column number within a line, starting at 1 for first the character of the line.\n","sig":null,"attributes":[{"value":"/ The column number within a line, starting at 1 for first the character of the line.","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7571582,"byte_end":7571669,"line_start":177,"line_end":177,"column_start":19,"column_end":106}}]},{"kind":"Struct","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32997,"byte_end":33011,"line_start":18,"line_end":18,"column_start":12,"column_end":26},"name":"SourcePosition","qualname":"::parser::SourcePosition","value":"SourcePosition {  }","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101}],"decl_id":null,"docs":" A capture of the internal state of a `Parser` (including the position within the input),\n obtained from the `Parser::position` method.","sig":null,"attributes":[{"value":"/ A capture of the internal state of a `Parser` (including the position within the input),","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32659,"byte_end":32751,"line_start":12,"line_end":12,"column_start":1,"column_end":93}},{"value":"/ obtained from the `Parser::position` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32752,"byte_end":32800,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32801,"byte_end":32804,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Can be used with the `Parser::reset` method to restore that state.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32805,"byte_end":32875,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ Should only be used with the `Parser` instance it came from.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":32876,"byte_end":32940,"line_start":16,"line_end":16,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33295,"byte_end":33310,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"UnexpectedToken","qualname":"::parser::BasicParseError::UnexpectedToken","value":"BasicParseError::UnexpectedToken(Token)","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" An unexpected token was encountered.\n","sig":null,"attributes":[{"value":"/ An unexpected token was encountered.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33250,"byte_end":33290,"line_start":26,"line_end":26,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33382,"byte_end":33395,"line_start":29,"line_end":29,"column_start":5,"column_end":18},"name":"ExpectedToken","qualname":"::parser::BasicParseError::ExpectedToken","value":"BasicParseError::ExpectedToken(Token)","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" A particular token was expected but not found.\n","sig":null,"attributes":[{"value":"/ A particular token was expected but not found.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33327,"byte_end":33377,"line_start":28,"line_end":28,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33471,"byte_end":33481,"line_start":31,"line_end":31,"column_start":5,"column_end":15},"name":"EndOfInput","qualname":"::parser::BasicParseError::EndOfInput","value":"BasicParseError::EndOfInput","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" The end of the input was encountered unexpectedly.\n","sig":null,"attributes":[{"value":"/ The end of the input was encountered unexpectedly.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33412,"byte_end":33466,"line_start":30,"line_end":30,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33541,"byte_end":33554,"line_start":33,"line_end":33,"column_start":5,"column_end":18},"name":"AtRuleInvalid","qualname":"::parser::BasicParseError::AtRuleInvalid","value":"BasicParseError::AtRuleInvalid","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" An `@` rule was encountered that was invalid.\n","sig":null,"attributes":[{"value":"/ An `@` rule was encountered that was invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33487,"byte_end":33536,"line_start":32,"line_end":32,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33619,"byte_end":33639,"line_start":35,"line_end":35,"column_start":5,"column_end":25},"name":"QualifiedRuleInvalid","qualname":"::parser::BasicParseError::QualifiedRuleInvalid","value":"BasicParseError::QualifiedRuleInvalid","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" A qualified rule was encountered that was invalid.\n","sig":null,"attributes":[{"value":"/ A qualified rule was encountered that was invalid.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33560,"byte_end":33614,"line_start":34,"line_end":34,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33224,"byte_end":33239,"line_start":25,"line_end":25,"column_start":10,"column_end":25},"name":"BasicParseError","qualname":"::parser::BasicParseError","value":"pub enum BasicParseError<'a> {\n\n    /// An unexpected token was encountered.\n    UnexpectedToken(Token),\n\n    /// A particular token was expected but not found.\n    ExpectedToken(Token),\n\n    /// The end of the input was encountered unexpectedly.\n    EndOfInput,\n\n    /// An `@` rule was encountered that was invalid.\n    AtRuleInvalid,\n\n    /// A qualified rule was encountered that was invalid.\n    QualifiedRuleInvalid,\n}","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126}],"decl_id":null,"docs":" The funamental parsing errors that can be triggered by built-in parsing routines.\n","sig":null,"attributes":[{"value":"/ The funamental parsing errors that can be triggered by built-in parsing routines.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33094,"byte_end":33179,"line_start":23,"line_end":23,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34035,"byte_end":34040,"line_start":48,"line_end":48,"column_start":5,"column_end":10},"name":"Basic","qualname":"::parser::ParseError::Basic","value":"ParseError::Basic(BasicParseError)","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" A fundamental parse error from a built-in parsing routine.\n","sig":null,"attributes":[{"value":"/ A fundamental parse error from a built-in parsing routine.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33968,"byte_end":34030,"line_start":47,"line_end":47,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34127,"byte_end":34133,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"Custom","qualname":"::parser::ParseError::Custom","value":"ParseError::Custom(T)","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" A parse error reported by downstream consumer code.\n","sig":null,"attributes":[{"value":"/ A parse error reported by downstream consumer code.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34067,"byte_end":34122,"line_start":49,"line_end":49,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33940,"byte_end":33950,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"name":"ParseError","qualname":"::parser::ParseError","value":"pub enum ParseError<'a, T: 'a> {\n\n    /// A fundamental parse error from a built-in parsing routine.\n    Basic(BasicParseError),\n\n    /// A parse error reported by downstream consumer code.\n    Custom(T),\n}","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1146}],"decl_id":null,"docs":" Extensible parse errors that can be encountered by client parsing implementations.\n","sig":null,"attributes":[{"value":"/ Extensible parse errors that can be encountered by client parsing implementations.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33809,"byte_end":33895,"line_start":44,"line_end":44,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34254,"byte_end":34259,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"basic","qualname":"<ParseError>::basic","value":"pub fn basic(Self) -> BasicParseError","parent":null,"children":[],"decl_id":null,"docs":" Extract the fundamental parse error from an extensible error.\n","sig":null,"attributes":[{"value":"/ Extract the fundamental parse error from an extensible error.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34177,"byte_end":34242,"line_start":54,"line_end":54,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34487,"byte_end":34498,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"ParserInput","qualname":"::parser::ParserInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The owned input for a parser.\n","sig":null,"attributes":[{"value":"/ The owned input for a parser.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34442,"byte_end":34475,"line_start":63,"line_end":63,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34599,"byte_end":34602,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserInput>::new","value":"pub fn new(&'t str) -> ParserInput","parent":null,"children":[],"decl_id":null,"docs":" Create a new input for a parser.\n","sig":null,"attributes":[{"value":"/ Create a new input for a parser.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34551,"byte_end":34587,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34824,"byte_end":34830,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"decl_id":null,"docs":" A CSS parser that borrows its `&str` input,\n yields `Token`s,\n and keeps track of nested blocks and functions.\n","sig":null,"attributes":[{"value":"/ A CSS parser that borrows its `&str` input,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34692,"byte_end":34739,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"/ yields `Token`s,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34740,"byte_end":34760,"line_start":74,"line_end":74,"column_start":1,"column_end":21}},{"value":"/ and keeps track of nested blocks and functions.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34761,"byte_end":34812,"line_start":75,"line_end":75,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36231,"byte_end":36241,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"Delimiters","qualname":"::parser::Delimiters","value":"Delimiters {  }","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" A set of characters, to be used with the `Parser::parse_until*` methods.","sig":null,"attributes":[{"value":"/ A set of characters, to be used with the `Parser::parse_until*` methods.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":35905,"byte_end":35981,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":35982,"byte_end":35985,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The union of two sets can be obtained with the `|` operator. Example:","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":35986,"byte_end":36059,"line_start":117,"line_end":117,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36060,"byte_end":36063,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ```{rust,ignore}","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36064,"byte_end":36084,"line_start":119,"line_end":119,"column_start":1,"column_end":21}},{"value":"/ input.parse_until_before(Delimiter::CurlyBracketBlock | Delimiter::Semicolon)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36085,"byte_end":36166,"line_start":120,"line_end":120,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36167,"byte_end":36174,"line_start":121,"line_end":121,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36346,"byte_end":36355,"line_start":129,"line_end":129,"column_start":9,"column_end":18},"name":"Delimiter","qualname":"::parser::Delimiter","value":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" `Delimiters` constants.\n","sig":null,"attributes":[{"value":"/ `Delimiters` constants.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36261,"byte_end":36288,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"allow(non_upper_case_globals, non_snake_case)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36289,"byte_end":36337,"line_start":128,"line_end":128,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36432,"byte_end":36436,"line_start":133,"line_end":133,"column_start":15,"column_end":19},"name":"None","qualname":"::parser::Delimiter::None","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The empty delimiter set\n","sig":null,"attributes":[{"value":"/ The empty delimiter set","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36390,"byte_end":36417,"line_start":132,"line_end":132,"column_start":5,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36555,"byte_end":36572,"line_start":135,"line_end":135,"column_start":15,"column_end":32},"name":"CurlyBracketBlock","qualname":"::parser::Delimiter::CurlyBracketBlock","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `{` opening curly bracket\n","sig":null,"attributes":[{"value":"/ The delimiter set with only the `{` opening curly bracket","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36479,"byte_end":36540,"line_start":134,"line_end":134,"column_start":5,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36684,"byte_end":36693,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"name":"Semicolon","qualname":"::parser::Delimiter::Semicolon","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `;` semicolon\n","sig":null,"attributes":[{"value":"/ The delimiter set with only the `;` semicolon","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36620,"byte_end":36669,"line_start":136,"line_end":136,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36813,"byte_end":36817,"line_start":139,"line_end":139,"column_start":15,"column_end":19},"name":"Bang","qualname":"::parser::Delimiter::Bang","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `!` exclamation point\n","sig":null,"attributes":[{"value":"/ The delimiter set with only the `!` exclamation point","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36741,"byte_end":36798,"line_start":138,"line_end":138,"column_start":5,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36925,"byte_end":36930,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"Comma","qualname":"::parser::Delimiter::Comma","value":"Delimiters","parent":null,"children":[],"decl_id":null,"docs":" The delimiter set with only the `,` comma\n","sig":null,"attributes":[{"value":"/ The delimiter set with only the `,` comma","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":36865,"byte_end":36910,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38197,"byte_end":38200,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"pub fn new(&'t mut ParserInput) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser\n","sig":null,"attributes":[{"value":"/ Create a new parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38148,"byte_end":38171,"line_start":181,"line_end":181,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38176,"byte_end":38185,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38559,"byte_end":38571,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"is_exhausted","qualname":"<Parser>::is_exhausted","value":"pub fn is_exhausted(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether the input is exhausted. That is, if `.next()` would return a token.","sig":null,"attributes":[{"value":"/ Check whether the input is exhausted. That is, if `.next()` would return a token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38394,"byte_end":38479,"line_start":191,"line_end":191,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38484,"byte_end":38487,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This ignores whitespace and comments.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38492,"byte_end":38533,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38538,"byte_end":38547,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38906,"byte_end":38922,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"expect_exhausted","qualname":"<Parser>::expect_exhausted","value":"pub fn expect_exhausted(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Check whether the input is exhausted. That is, if `.next()` would return a token.\n Return a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`","sig":null,"attributes":[{"value":"/ Check whether the input is exhausted. That is, if `.next()` would return a token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38644,"byte_end":38729,"line_start":199,"line_end":199,"column_start":5,"column_end":90}},{"value":"/ Return a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38734,"byte_end":38826,"line_start":200,"line_end":200,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38831,"byte_end":38834,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ This ignores whitespace and comments.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38839,"byte_end":38880,"line_start":202,"line_end":202,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38885,"byte_end":38894,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39525,"byte_end":39533,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"position","qualname":"<Parser>::position","value":"pub fn position(&Self) -> SourcePosition","parent":null,"children":[],"decl_id":null,"docs":" Return the current internal state of the parser (including position within the input).","sig":null,"attributes":[{"value":"/ Return the current internal state of the parser (including position within the input).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39327,"byte_end":39417,"line_start":215,"line_end":215,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39422,"byte_end":39425,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This state can later be restored with the `Parser::reset` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39430,"byte_end":39499,"line_start":217,"line_end":217,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39504,"byte_end":39513,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39980,"byte_end":39985,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"reset","qualname":"<Parser>::reset","value":"pub fn reset(&mut Self, SourcePosition)","parent":null,"children":[],"decl_id":null,"docs":" Restore the internal state of the parser (including position within the input)\n to what was previously saved by the `Parser::position` method.","sig":null,"attributes":[{"value":"/ Restore the internal state of the parser (including position within the input)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39703,"byte_end":39785,"line_start":226,"line_end":226,"column_start":5,"column_end":87}},{"value":"/ to what was previously saved by the `Parser::position` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39790,"byte_end":39856,"line_start":227,"line_end":227,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39861,"byte_end":39864,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Should only be used with `SourcePosition` values from the same `Parser` instance.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39869,"byte_end":39954,"line_start":229,"line_end":229,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":39959,"byte_end":39968,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40258,"byte_end":40280,"line_start":238,"line_end":238,"column_start":12,"column_end":34},"name":"look_for_var_functions","qualname":"<Parser>::look_for_var_functions","value":"pub fn look_for_var_functions(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Start looking for `var()` functions. (See the `.seen_var_functions()` method.)\n","sig":null,"attributes":[{"value":"/ Start looking for `var()` functions. (See the `.seen_var_functions()` method.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40150,"byte_end":40232,"line_start":236,"line_end":236,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40237,"byte_end":40246,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40527,"byte_end":40545,"line_start":245,"line_end":245,"column_start":12,"column_end":30},"name":"seen_var_functions","qualname":"<Parser>::seen_var_functions","value":"pub fn seen_var_functions(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a `var()` function has been seen by the tokenizer since\n either `look_for_var_functions` was called, and stop looking.\n","sig":null,"attributes":[{"value":"/ Return whether a `var()` function has been seen by the tokenizer since","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40357,"byte_end":40431,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/ either `look_for_var_functions` was called, and stop looking.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40436,"byte_end":40501,"line_start":243,"line_end":243,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40506,"byte_end":40515,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40756,"byte_end":40785,"line_start":252,"line_end":252,"column_start":12,"column_end":41},"name":"look_for_viewport_percentages","qualname":"<Parser>::look_for_viewport_percentages","value":"pub fn look_for_viewport_percentages(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Start looking for viewport percentage lengths. (See the `seen_viewport_percentages`\n method.)\n","sig":null,"attributes":[{"value":"/ Start looking for viewport percentage lengths. (See the `seen_viewport_percentages`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40626,"byte_end":40713,"line_start":249,"line_end":249,"column_start":5,"column_end":92}},{"value":"/ method.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40718,"byte_end":40730,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40735,"byte_end":40744,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41062,"byte_end":41087,"line_start":259,"line_end":259,"column_start":12,"column_end":37},"name":"seen_viewport_percentages","qualname":"<Parser>::seen_viewport_percentages","value":"pub fn seen_viewport_percentages(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a `vh`, `vw`, `vmin`, or `vmax` dimension has been seen by the tokenizer\n since `look_for_viewport_percentages` was called, and stop looking.\n","sig":null,"attributes":[{"value":"/ Return whether a `vh`, `vw`, `vmin`, or `vmax` dimension has been seen by the tokenizer","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40869,"byte_end":40960,"line_start":256,"line_end":256,"column_start":5,"column_end":96}},{"value":"/ since `look_for_viewport_percentages` was called, and stop looking.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":40965,"byte_end":41036,"line_start":257,"line_end":257,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41041,"byte_end":41050,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41439,"byte_end":41442,"line_start":268,"line_end":268,"column_start":12,"column_end":15},"name":"try","qualname":"<Parser>::try","value":"pub fn try<F, T, E>(&mut Self, F) -> Result<T, E> where F: FnOnce(&mut Parser)\n-> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure, passing it the parser.\n If the result (returned unchanged) is `Err`,\n the internal state of the parser  (including position within the input)\n is restored to what it was before the call.\n","sig":null,"attributes":[{"value":"/ Execute the given closure, passing it the parser.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41175,"byte_end":41228,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/ If the result (returned unchanged) is `Err`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41233,"byte_end":41281,"line_start":264,"line_end":264,"column_start":5,"column_end":53}},{"value":"/ the internal state of the parser  (including position within the input)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41286,"byte_end":41361,"line_start":265,"line_end":265,"column_start":5,"column_end":80}},{"value":"/ is restored to what it was before the call.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41366,"byte_end":41413,"line_start":266,"line_end":266,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41418,"byte_end":41427,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41793,"byte_end":41798,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"slice","qualname":"<Parser>::slice","value":"pub fn slice(&Self, Range<SourcePosition>) -> &'i str","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of the CSS input\n","sig":null,"attributes":[{"value":"/ Return a slice of the CSS input","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41732,"byte_end":41767,"line_start":278,"line_end":278,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41772,"byte_end":41781,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42041,"byte_end":42051,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"slice_from","qualname":"<Parser>::slice_from","value":"pub fn slice_from(&Self, SourcePosition) -> &'i str","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of the CSS input, from the given position to the current one.\n","sig":null,"attributes":[{"value":"/ Return a slice of the CSS input, from the given position to the current one.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":41935,"byte_end":42015,"line_start":284,"line_end":284,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42020,"byte_end":42029,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42284,"byte_end":42307,"line_start":292,"line_end":292,"column_start":12,"column_end":35},"name":"current_source_location","qualname":"<Parser>::current_source_location","value":"pub fn current_source_location(&Self) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" Return the line and column number within the input for the current position.\n","sig":null,"attributes":[{"value":"/ Return the line and column number within the input for the current position.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42178,"byte_end":42258,"line_start":290,"line_end":290,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42263,"byte_end":42272,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42503,"byte_end":42518,"line_start":298,"line_end":298,"column_start":12,"column_end":27},"name":"source_location","qualname":"<Parser>::source_location","value":"pub fn source_location(&Self, SourcePosition) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" Return the line and column number within the input for the given position.\n","sig":null,"attributes":[{"value":"/ Return the line and column number within the input for the given position.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42399,"byte_end":42477,"line_start":296,"line_end":296,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42482,"byte_end":42491,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43243,"byte_end":43247,"line_start":313,"line_end":313,"column_start":12,"column_end":16},"name":"next","qualname":"<Parser>::next","value":"pub fn next(&mut Self) -> Result<Token, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Return the next token in the input that is neither whitespace or a comment,\n and advance the position accordingly.","sig":null,"attributes":[{"value":"/ Return the next token in the input that is neither whitespace or a comment,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42641,"byte_end":42720,"line_start":302,"line_end":302,"column_start":5,"column_end":84}},{"value":"/ and advance the position accordingly.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42725,"byte_end":42766,"line_start":303,"line_end":303,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42771,"byte_end":42774,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ After returning a `Function`, `ParenthesisBlock`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42779,"byte_end":42832,"line_start":305,"line_end":305,"column_start":5,"column_end":58}},{"value":"/ `CurlyBracketBlock`, or `SquareBracketBlock` token,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42837,"byte_end":42892,"line_start":306,"line_end":306,"column_start":5,"column_end":60}},{"value":"/ the next call will skip until after the matching `CloseParenthesis`,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42897,"byte_end":42969,"line_start":307,"line_end":307,"column_start":5,"column_end":77}},{"value":"/ `CloseCurlyBracket`, or `CloseSquareBracket` token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":42974,"byte_end":43029,"line_start":308,"line_end":308,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43034,"byte_end":43037,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ See the `Parser::parse_nested_block` method to parse the content of functions or blocks.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43042,"byte_end":43134,"line_start":310,"line_end":310,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43139,"byte_end":43142,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This only returns a closing token when it is unmatched (and therefore an error).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43147,"byte_end":43231,"line_start":312,"line_end":312,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43607,"byte_end":43632,"line_start":323,"line_end":323,"column_start":12,"column_end":37},"name":"next_including_whitespace","qualname":"<Parser>::next_including_whitespace","value":"pub fn next_including_whitespace(&mut Self) -> Result<Token, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Parser::next`, but does not skip whitespace tokens.\n","sig":null,"attributes":[{"value":"/ Same as `Parser::next`, but does not skip whitespace tokens.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43531,"byte_end":43595,"line_start":322,"line_end":322,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44236,"byte_end":44274,"line_start":338,"line_end":338,"column_start":12,"column_end":50},"name":"next_including_whitespace_and_comments","qualname":"<Parser>::next_including_whitespace_and_comments","value":"pub fn next_including_whitespace_and_comments(&mut Self)\n-> Result<Token, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Parser::next`, but does not skip whitespace or comment tokens.","sig":null,"attributes":[{"value":"/ Same as `Parser::next`, but does not skip whitespace or comment tokens.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43889,"byte_end":43964,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43969,"byte_end":43972,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ **Note**: This should only be used in contexts like a CSS pre-processor","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":43977,"byte_end":44052,"line_start":334,"line_end":334,"column_start":5,"column_end":80}},{"value":"/ where comments are preserved.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44057,"byte_end":44090,"line_start":335,"line_end":335,"column_start":5,"column_end":38}},{"value":"/ When parsing higher-level values, per the CSS Syntax specification,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44095,"byte_end":44166,"line_start":336,"line_end":336,"column_start":5,"column_end":76}},{"value":"/ comments should always be ignored between tokens.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44171,"byte_end":44224,"line_start":337,"line_end":337,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45155,"byte_end":45169,"line_start":358,"line_end":358,"column_start":12,"column_end":26},"name":"parse_entirely","qualname":"<Parser>::parse_entirely","value":"pub fn parse_entirely<F, T, E>(&mut Self, F) -> Result<T, ParseError> where\nF: FnOnce(&mut Parser) -> Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Have the given closure parse something, then check the the input is exhausted.\n The result is overridden to `Err(())` if some input remains.","sig":null,"attributes":[{"value":"/ Have the given closure parse something, then check the the input is exhausted.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44897,"byte_end":44979,"line_start":353,"line_end":353,"column_start":5,"column_end":87}},{"value":"/ The result is overridden to `Err(())` if some input remains.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":44984,"byte_end":45048,"line_start":354,"line_end":354,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45053,"byte_end":45056,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ This can help tell e.g. `color: green;` from `color: green 4px;`","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45061,"byte_end":45129,"line_start":356,"line_end":356,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45134,"byte_end":45143,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45972,"byte_end":45993,"line_start":376,"line_end":376,"column_start":12,"column_end":33},"name":"parse_comma_separated","qualname":"<Parser>::parse_comma_separated","value":"pub fn parse_comma_separated<F, T, E>(&mut Self, F)\n-> Result<Vec<T>, ParseError> where F: for<'tt> FnMut(&mut Parser) ->\nResult<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a list of comma-separated values, all with the same syntax.","sig":null,"attributes":[{"value":"/ Parse a list of comma-separated values, all with the same syntax.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45401,"byte_end":45470,"line_start":365,"line_end":365,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45475,"byte_end":45478,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ The given closure is called repeatedly with a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45483,"byte_end":45551,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/ (see the `Parser::parse_until_before` method)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45556,"byte_end":45605,"line_start":368,"line_end":368,"column_start":5,"column_end":54}},{"value":"/ so that it can over consume the input past a comma at this block/function nesting level.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45610,"byte_end":45702,"line_start":369,"line_end":369,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45707,"byte_end":45710,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Successful results are accumulated in a vector.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45715,"byte_end":45766,"line_start":371,"line_end":371,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45771,"byte_end":45774,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This method retuns `Err(())` the first time that a closure call does,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45779,"byte_end":45852,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ or if a closure call leaves some input before the next comma or the end of the input.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45857,"byte_end":45946,"line_start":374,"line_end":374,"column_start":5,"column_end":94}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":45951,"byte_end":45960,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47091,"byte_end":47109,"line_start":401,"line_end":401,"column_start":12,"column_end":30},"name":"parse_nested_block","qualname":"<Parser>::parse_nested_block","value":"pub fn parse_nested_block<F, T, E>(&mut Self, F) -> Result<T, ParseError>\nwhere F: for<'tt> FnOnce(&mut Parser) -> Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse the content of a block or function.","sig":null,"attributes":[{"value":"/ Parse the content of a block or function.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46485,"byte_end":46530,"line_start":389,"line_end":389,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46535,"byte_end":46538,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ This method panics if the last token yielded by this parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46543,"byte_end":46606,"line_start":391,"line_end":391,"column_start":5,"column_end":68}},{"value":"/ (from one of the `next*` methods)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46611,"byte_end":46648,"line_start":392,"line_end":392,"column_start":5,"column_end":42}},{"value":"/ is not a on that marks the start of a block or function:","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46653,"byte_end":46713,"line_start":393,"line_end":393,"column_start":5,"column_end":65}},{"value":"/ a `Function`, `ParenthesisBlock`, `CurlyBracketBlock`, or `SquareBracketBlock`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46718,"byte_end":46801,"line_start":394,"line_end":394,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46806,"byte_end":46809,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The given closure is called with a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46814,"byte_end":46871,"line_start":396,"line_end":396,"column_start":5,"column_end":62}},{"value":"/ that stops at the end of the block or function (at the matching closing token).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46876,"byte_end":46959,"line_start":397,"line_end":397,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46964,"byte_end":46967,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The result is overridden to `Err(())` if the closure leaves some input before that point.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":46972,"byte_end":47065,"line_start":399,"line_end":399,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47070,"byte_end":47079,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47790,"byte_end":47808,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"parse_until_before","qualname":"<Parser>::parse_until_before","value":"pub fn parse_until_before<F, T, E>(&mut Self, Delimiters, F)\n-> Result<T, ParseError> where F: for<'tt> FnOnce(&mut Parser) ->\nResult<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Limit parsing to until a given delimiter or the end of the input. (E.g.\n a semicolon for a property value.)","sig":null,"attributes":[{"value":"/ Limit parsing to until a given delimiter or the end of the input. (E.g.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47309,"byte_end":47384,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ a semicolon for a property value.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47389,"byte_end":47427,"line_start":407,"line_end":407,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47432,"byte_end":47435,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The given closure is called with a \"delimited\" parser","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47440,"byte_end":47497,"line_start":409,"line_end":409,"column_start":5,"column_end":62}},{"value":"/ that stops before the first character at this block/function nesting level","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47502,"byte_end":47580,"line_start":410,"line_end":410,"column_start":5,"column_end":83}},{"value":"/ that matches the given set of delimiters, or at the end of the input.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47585,"byte_end":47658,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47663,"byte_end":47666,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ The result is overridden to `Err(())` if the closure leaves some input before that point.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47671,"byte_end":47764,"line_start":413,"line_end":413,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":47769,"byte_end":47778,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48396,"byte_end":48413,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"parse_until_after","qualname":"<Parser>::parse_until_after","value":"pub fn parse_until_after<F, T, E>(&mut Self, Delimiters, F)\n-> Result<T, ParseError> where F: for<'tt> FnOnce(&mut Parser) ->\nResult<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Like `parse_until_before`, but also consume the delimiter token.","sig":null,"attributes":[{"value":"/ Like `parse_until_before`, but also consume the delimiter token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48080,"byte_end":48148,"line_start":421,"line_end":421,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48153,"byte_end":48156,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ This can be useful when you don’t need to know which delimiter it was","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48161,"byte_end":48236,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ (e.g. if these is only one in the given set)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48241,"byte_end":48289,"line_start":424,"line_end":424,"column_start":5,"column_end":53}},{"value":"/ or if it was there at all (as opposed to reaching the end of the input).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48294,"byte_end":48370,"line_start":425,"line_end":425,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48375,"byte_end":48384,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48761,"byte_end":48778,"line_start":435,"line_end":435,"column_start":12,"column_end":29},"name":"expect_whitespace","qualname":"<Parser>::expect_whitespace","value":"pub fn expect_whitespace(&mut Self) -> Result<&'i str, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <whitespace-token> and return its value.\n","sig":null,"attributes":[{"value":"/ Parse a <whitespace-token> and return its value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48683,"byte_end":48735,"line_start":433,"line_end":433,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":48740,"byte_end":48749,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49095,"byte_end":49107,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"expect_ident","qualname":"<Parser>::expect_ident","value":"pub fn expect_ident(&mut Self) -> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <ident-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"/ Parse a <ident-token> and return the unescaped value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49012,"byte_end":49069,"line_start":442,"line_end":442,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49074,"byte_end":49083,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49449,"byte_end":49470,"line_start":453,"line_end":453,"column_start":12,"column_end":33},"name":"expect_ident_matching","qualname":"<Parser>::expect_ident_matching","value":"pub fn expect_ident_matching(&mut Self, &str) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.\n","sig":null,"attributes":[{"value":"/ Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49325,"byte_end":49423,"line_start":451,"line_end":451,"column_start":5,"column_end":103}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49428,"byte_end":49437,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49826,"byte_end":49839,"line_start":462,"line_end":462,"column_start":12,"column_end":25},"name":"expect_string","qualname":"<Parser>::expect_string","value":"pub fn expect_string(&mut Self) -> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <string-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"/ Parse a <string-token> and return the unescaped value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49742,"byte_end":49800,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":49805,"byte_end":49814,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50175,"byte_end":50197,"line_start":471,"line_end":471,"column_start":12,"column_end":34},"name":"expect_ident_or_string","qualname":"<Parser>::expect_ident_or_string","value":"pub fn expect_ident_or_string(&mut Self)\n-> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse either a <ident-token> or a <string-token>, and return the unescaped value.\n","sig":null,"attributes":[{"value":"/ Parse either a <ident-token> or a <string-token>, and return the unescaped value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50064,"byte_end":50149,"line_start":469,"line_end":469,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50154,"byte_end":50163,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50549,"byte_end":50559,"line_start":481,"line_end":481,"column_start":12,"column_end":22},"name":"expect_url","qualname":"<Parser>::expect_url","value":"pub fn expect_url(&mut Self) -> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <url-token> and return the unescaped value.\n","sig":null,"attributes":[{"value":"/ Parse a <url-token> and return the unescaped value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50468,"byte_end":50523,"line_start":479,"line_end":479,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":50528,"byte_end":50537,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51186,"byte_end":51206,"line_start":495,"line_end":495,"column_start":12,"column_end":32},"name":"expect_url_or_string","qualname":"<Parser>::expect_url_or_string","value":"pub fn expect_url_or_string(&mut Self)\n-> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse either a <url-token> or a <string-token>, and return the unescaped value.\n","sig":null,"attributes":[{"value":"/ Parse either a <url-token> or a <string-token>, and return the unescaped value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51077,"byte_end":51160,"line_start":493,"line_end":493,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51165,"byte_end":51174,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51818,"byte_end":51831,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"name":"expect_number","qualname":"<Parser>::expect_number","value":"pub fn expect_number(&mut Self) -> Result<f32, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <number-token> and return the integer value.\n","sig":null,"attributes":[{"value":"/ Parse a <number-token> and return the integer value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51736,"byte_end":51792,"line_start":507,"line_end":507,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":51797,"byte_end":51806,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52163,"byte_end":52177,"line_start":518,"line_end":518,"column_start":12,"column_end":26},"name":"expect_integer","qualname":"<Parser>::expect_integer","value":"pub fn expect_integer(&mut Self) -> Result<i32, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <number-token> that does not have a fractional part, and return the integer value.\n","sig":null,"attributes":[{"value":"/ Parse a <number-token> that does not have a fractional part, and return the integer value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52043,"byte_end":52137,"line_start":516,"line_end":516,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52142,"byte_end":52151,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52626,"byte_end":52643,"line_start":531,"line_end":531,"column_start":12,"column_end":29},"name":"expect_percentage","qualname":"<Parser>::expect_percentage","value":"pub fn expect_percentage(&mut Self) -> Result<f32, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <percentage-token> and return the value.\n `0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.\n","sig":null,"attributes":[{"value":"/ Parse a <percentage-token> and return the value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52472,"byte_end":52524,"line_start":528,"line_end":528,"column_start":5,"column_end":57}},{"value":"/ `0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52529,"byte_end":52600,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52605,"byte_end":52614,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52925,"byte_end":52937,"line_start":540,"line_end":540,"column_start":12,"column_end":24},"name":"expect_colon","qualname":"<Parser>::expect_colon","value":"pub fn expect_colon(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `:` <colon-token>.\n","sig":null,"attributes":[{"value":"/ Parse a `:` <colon-token>.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52869,"byte_end":52899,"line_start":538,"line_end":538,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":52904,"byte_end":52913,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53190,"byte_end":53206,"line_start":549,"line_end":549,"column_start":12,"column_end":28},"name":"expect_semicolon","qualname":"<Parser>::expect_semicolon","value":"pub fn expect_semicolon(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `;` <semicolon-token>.\n","sig":null,"attributes":[{"value":"/ Parse a `;` <semicolon-token>.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53130,"byte_end":53164,"line_start":547,"line_end":547,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53169,"byte_end":53178,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53459,"byte_end":53471,"line_start":558,"line_end":558,"column_start":12,"column_end":24},"name":"expect_comma","qualname":"<Parser>::expect_comma","value":"pub fn expect_comma(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `,` <comma-token>.\n","sig":null,"attributes":[{"value":"/ Parse a `,` <comma-token>.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53403,"byte_end":53433,"line_start":556,"line_end":556,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53438,"byte_end":53447,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53737,"byte_end":53749,"line_start":567,"line_end":567,"column_start":12,"column_end":24},"name":"expect_delim","qualname":"<Parser>::expect_delim","value":"pub fn expect_delim(&mut Self, char) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <delim-token> with the given value.\n","sig":null,"attributes":[{"value":"/ Parse a <delim-token> with the given value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53664,"byte_end":53711,"line_start":565,"line_end":565,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53716,"byte_end":53725,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54171,"byte_end":54197,"line_start":578,"line_end":578,"column_start":12,"column_end":38},"name":"expect_curly_bracket_block","qualname":"<Parser>::expect_curly_bracket_block","value":"pub fn expect_curly_bracket_block(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `{ /* ... */ }` curly brackets block.","sig":null,"attributes":[{"value":"/ Parse a `{ /* ... */ }` curly brackets block.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":53998,"byte_end":54047,"line_start":574,"line_end":574,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54052,"byte_end":54055,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok`, you can then call the `Parser::parse_nested_block` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54060,"byte_end":54145,"line_start":576,"line_end":576,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54150,"byte_end":54159,"line_start":577,"line_end":577,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54576,"byte_end":54603,"line_start":589,"line_end":589,"column_start":12,"column_end":39},"name":"expect_square_bracket_block","qualname":"<Parser>::expect_square_bracket_block","value":"pub fn expect_square_bracket_block(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `[ /* ... */ ]` square brackets block.","sig":null,"attributes":[{"value":"/ Parse a `[ /* ... */ ]` square brackets block.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54402,"byte_end":54452,"line_start":585,"line_end":585,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54457,"byte_end":54460,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok`, you can then call the `Parser::parse_nested_block` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54465,"byte_end":54550,"line_start":587,"line_end":587,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54555,"byte_end":54564,"line_start":588,"line_end":588,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54979,"byte_end":55003,"line_start":600,"line_end":600,"column_start":12,"column_end":36},"name":"expect_parenthesis_block","qualname":"<Parser>::expect_parenthesis_block","value":"pub fn expect_parenthesis_block(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `( /* ... */ )` parenthesis block.","sig":null,"attributes":[{"value":"/ Parse a `( /* ... */ )` parenthesis block.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54809,"byte_end":54855,"line_start":596,"line_end":596,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54860,"byte_end":54863,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok`, you can then call the `Parser::parse_nested_block` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54868,"byte_end":54953,"line_start":598,"line_end":598,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":54958,"byte_end":54967,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55380,"byte_end":55395,"line_start":611,"line_end":611,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<Parser>::expect_function","value":"pub fn expect_function(&mut Self) -> Result<CompactCowStr, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <function> token and return its name.","sig":null,"attributes":[{"value":"/ Parse a <function> token and return its name.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55207,"byte_end":55256,"line_start":607,"line_end":607,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55261,"byte_end":55264,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok`, you can then call the `Parser::parse_nested_block` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55269,"byte_end":55354,"line_start":609,"line_end":609,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55359,"byte_end":55368,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55828,"byte_end":55852,"line_start":622,"line_end":622,"column_start":12,"column_end":36},"name":"expect_function_matching","qualname":"<Parser>::expect_function_matching","value":"pub fn expect_function_matching(&mut Self, &str)\n-> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <function> token whose name is an ASCII-insensitive match for the given value.","sig":null,"attributes":[{"value":"/ Parse a <function> token whose name is an ASCII-insensitive match for the given value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55614,"byte_end":55704,"line_start":618,"line_end":618,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55709,"byte_end":55712,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok`, you can then call the `Parser::parse_nested_block` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55717,"byte_end":55802,"line_start":620,"line_end":620,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":55807,"byte_end":55816,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":56337,"byte_end":56358,"line_start":633,"line_end":633,"column_start":12,"column_end":33},"name":"expect_no_error_token","qualname":"<Parser>::expect_no_error_token","value":"pub fn expect_no_error_token(&mut Self) -> Result<(), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse the input until exhaustion and check that it contains no “error” token.","sig":null,"attributes":[{"value":"/ Parse the input until exhaustion and check that it contains no “error” token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":56123,"byte_end":56208,"line_start":629,"line_end":629,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":56213,"byte_end":56216,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ See `Token::is_parse_error`. This also checks nested blocks and functions recursively.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":56221,"byte_end":56311,"line_start":631,"line_end":631,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":56316,"byte_end":56325,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61781,"byte_end":61796,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"EncodingSupport","qualname":"::from_bytes::EncodingSupport","value":"EncodingSupport","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"decl_id":null,"docs":" Abstraction for avoiding a dependency from cssparser to an encoding library\n","sig":null,"attributes":[{"value":"/ Abstraction for avoiding a dependency from cssparser to an encoding library","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61691,"byte_end":61770,"line_start":5,"line_end":5,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61839,"byte_end":61847,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"Encoding","qualname":"::from_bytes::EncodingSupport::Encoding","value":"type Encoding;","parent":{"krate":0,"index":357},"children":[],"decl_id":null,"docs":" One character encoding\n","sig":null,"attributes":[{"value":"/ One character encoding","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61803,"byte_end":61829,"line_start":7,"line_end":7,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61920,"byte_end":61930,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"from_label","qualname":"::from_bytes::EncodingSupport::from_label","value":"pub fn from_label(&[u8]) -> Option<Self::Encoding>","parent":{"krate":0,"index":357},"children":[],"decl_id":null,"docs":" https://encoding.spec.whatwg.org/#concept-encoding-get\n","sig":null,"attributes":[{"value":"/ https://encoding.spec.whatwg.org/#concept-encoding-get","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61854,"byte_end":61912,"line_start":10,"line_end":10,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62020,"byte_end":62024,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"utf8","qualname":"::from_bytes::EncodingSupport::utf8","value":"pub fn utf8() -> Self::Encoding","parent":{"krate":0,"index":357},"children":[],"decl_id":null,"docs":" Return the UTF-8 encoding\n","sig":null,"attributes":[{"value":"/ Return the UTF-8 encoding","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":61983,"byte_end":62012,"line_start":13,"line_end":13,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62113,"byte_end":62130,"line_start":17,"line_end":17,"column_start":8,"column_end":25},"name":"is_utf16_be_or_le","qualname":"::from_bytes::EncodingSupport::is_utf16_be_or_le","value":"pub fn is_utf16_be_or_le(&Self::Encoding) -> bool","parent":{"krate":0,"index":357},"children":[],"decl_id":null,"docs":" Whether the given encoding is UTF-16BE or UTF-16LE\n","sig":null,"attributes":[{"value":"/ Whether the given encoding is UTF-16BE or UTF-16LE","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62051,"byte_end":62105,"line_start":16,"line_end":16,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62768,"byte_end":62787,"line_start":33,"line_end":33,"column_start":8,"column_end":27},"name":"stylesheet_encoding","qualname":"::from_bytes::stylesheet_encoding","value":"pub fn stylesheet_encoding<E>(&[u8], Option<&[u8]>, Option<E::Encoding>)\n-> E::Encoding where E: EncodingSupport","parent":null,"children":[],"decl_id":null,"docs":" Determine the character encoding of a CSS stylesheet.","sig":null,"attributes":[{"value":"/ Determine the character encoding of a CSS stylesheet.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62171,"byte_end":62228,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62229,"byte_end":62232,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This is based on the presence of a BOM (Byte Order Mark), an `@charset` rule, and","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62233,"byte_end":62318,"line_start":23,"line_end":23,"column_start":1,"column_end":86}},{"value":"/ encoding meta-information.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62319,"byte_end":62349,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62350,"byte_end":62353,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * `css_bytes`: A byte string.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62354,"byte_end":62387,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/ * `protocol_encoding`: The encoding label, if any, defined by HTTP or equivalent protocol.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62388,"byte_end":62482,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/     (e.g. via the `charset` parameter of the `Content-Type` header.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62483,"byte_end":62555,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/ * `environment_encoding`: An optional `Encoding` object for the [environment encoding]","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62556,"byte_end":62646,"line_start":29,"line_end":29,"column_start":1,"column_end":91}},{"value":"/     (https://drafts.csswg.org/css-syntax/#environment-encoding), if any.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62647,"byte_end":62723,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62724,"byte_end":62727,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Returns the encoding to use.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\from_bytes.rs","byte_start":62728,"byte_end":62760,"line_start":32,"line_end":32,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64546,"byte_end":64550,"line_start":15,"line_end":15,"column_start":12,"column_end":16},"name":"RGBA","qualname":"::color::RGBA","value":"RGBA { red, green, blue, alpha }","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"decl_id":null,"docs":" A color with red, green, blue, and alpha components, in a byte each.\n","sig":null,"attributes":[{"value":"/ A color with red, green, blue, and alpha components, in a byte each.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64421,"byte_end":64493,"line_start":13,"line_end":13,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64588,"byte_end":64591,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"red","qualname":"::color::RGBA::red","value":"u8","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" The red component.\n","sig":null,"attributes":[{"value":"/ The red component.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64557,"byte_end":64579,"line_start":16,"line_end":16,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64634,"byte_end":64639,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"green","qualname":"::color::RGBA::green","value":"u8","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" The green component.\n","sig":null,"attributes":[{"value":"/ The green component.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64601,"byte_end":64625,"line_start":18,"line_end":18,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64681,"byte_end":64685,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"blue","qualname":"::color::RGBA::blue","value":"u8","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" The blue component.\n","sig":null,"attributes":[{"value":"/ The blue component.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64649,"byte_end":64672,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64728,"byte_end":64733,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"alpha","qualname":"::color::RGBA::alpha","value":"u8","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" The alpha component.\n","sig":null,"attributes":[{"value":"/ The alpha component.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64695,"byte_end":64719,"line_start":22,"line_end":22,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64977,"byte_end":64988,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"from_floats","qualname":"<RGBA>::from_floats","value":"pub fn from_floats(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new RGBA value from float components. It expects the red,\n green, blue and alpha channels in that order, and all values will be\n clamped to the 0.0 ... 1.0 range.\n","sig":null,"attributes":[{"value":"/ Constructs a new RGBA value from float components. It expects the red,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64758,"byte_end":64832,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ green, blue and alpha channels in that order, and all values will be","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64837,"byte_end":64909,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/ clamped to the 0.0 ... 1.0 range.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64914,"byte_end":64951,"line_start":29,"line_end":29,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64956,"byte_end":64965,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65279,"byte_end":65290,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"transparent","qualname":"<RGBA>::transparent","value":"pub fn transparent() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transparent color.\n","sig":null,"attributes":[{"value":"/ Returns a transparent color.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65221,"byte_end":65253,"line_start":40,"line_end":40,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65258,"byte_end":65267,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65445,"byte_end":65448,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<RGBA>::new","value":"pub fn new(u8, u8, u8, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same thing, but with `u8` values instead of floats in the 0 to 1 range.\n","sig":null,"attributes":[{"value":"/ Same thing, but with `u8` values instead of floats in the 0 to 1 range.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65344,"byte_end":65419,"line_start":46,"line_end":46,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65424,"byte_end":65433,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65676,"byte_end":65683,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"red_f32","qualname":"<RGBA>::red_f32","value":"pub fn red_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the red channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"/ Returns the red channel in a floating point number form, from 0 to 1.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65577,"byte_end":65650,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65655,"byte_end":65664,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65844,"byte_end":65853,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"green_f32","qualname":"<RGBA>::green_f32","value":"pub fn green_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the green channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"/ Returns the green channel in a floating point number form, from 0 to 1.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65743,"byte_end":65818,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65823,"byte_end":65832,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66015,"byte_end":66023,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"blue_f32","qualname":"<RGBA>::blue_f32","value":"pub fn blue_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the blue channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"/ Returns the blue channel in a floating point number form, from 0 to 1.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65915,"byte_end":65989,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":65994,"byte_end":66003,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66185,"byte_end":66194,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"alpha_f32","qualname":"<RGBA>::alpha_f32","value":"pub fn alpha_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the alpha channel in a floating point number form, from 0 to 1.\n","sig":null,"attributes":[{"value":"/ Returns the alpha channel in a floating point number form, from 0 to 1.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66084,"byte_end":66159,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66164,"byte_end":66173,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67597,"byte_end":67609,"line_start":122,"line_end":122,"column_start":5,"column_end":17},"name":"CurrentColor","qualname":"::color::Color::CurrentColor","value":"Color::CurrentColor","parent":{"krate":0,"index":1211},"children":[],"decl_id":null,"docs":" The 'currentcolor' keyword\n","sig":null,"attributes":[{"value":"/ The 'currentcolor' keyword","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67562,"byte_end":67592,"line_start":121,"line_end":121,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67677,"byte_end":67681,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::Color::RGBA","value":"Color::RGBA(RGBA)","parent":{"krate":0,"index":1211},"children":[],"decl_id":null,"docs":" Everything else gets converted to RGBA during parsing\n","sig":null,"attributes":[{"value":"/ Everything else gets converted to RGBA during parsing","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67615,"byte_end":67672,"line_start":123,"line_end":123,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67550,"byte_end":67555,"line_start":120,"line_end":120,"column_start":10,"column_end":15},"name":"Color","qualname":"::color::Color","value":"pub enum Color {\n\n    /// The 'currentcolor' keyword\n    CurrentColor,\n\n    /// Everything else gets converted to RGBA during parsing\n    RGBA(RGBA),\n}","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1214}],"decl_id":null,"docs":" A <color> value.\n","sig":null,"attributes":[{"value":"/ A <color> value.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67479,"byte_end":67499,"line_start":118,"line_end":118,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68176,"byte_end":68181,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"parse","qualname":"<Color>::parse","value":"pub fn parse<'i, 't>(&mut Parser) -> Result<Color, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse a <color> value, per CSS Color Module Level 3.","sig":null,"attributes":[{"value":"/ Parse a <color> value, per CSS Color Module Level 3.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68029,"byte_end":68085,"line_start":140,"line_end":140,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68090,"byte_end":68093,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ FIXME(#2) Deprecated CSS2 System Colors are not supported yet.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68098,"byte_end":68164,"line_start":142,"line_end":142,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68993,"byte_end":69003,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"parse_hash","qualname":"<Color>::parse_hash","value":"pub fn parse_hash(&[u8]) -> Result<Self, ()>","parent":null,"children":[],"decl_id":null,"docs":" Parse a color hash, without the leading '#' character.\n","sig":null,"attributes":[{"value":"/ Parse a color hash, without the leading '#' character.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68909,"byte_end":68967,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68972,"byte_end":68981,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70501,"byte_end":70520,"line_start":210,"line_end":210,"column_start":8,"column_end":27},"name":"parse_color_keyword","qualname":"::color::parse_color_keyword","value":"pub fn parse_color_keyword(&str) -> Result<Color, ()>","parent":null,"children":[],"decl_id":null,"docs":" Return the named color with the given name.","sig":null,"attributes":[{"value":"/ Return the named color with the given name.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70241,"byte_end":70288,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70289,"byte_end":70292,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ Matching is case-insensitive in the ASCII range.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70293,"byte_end":70345,"line_start":206,"line_end":206,"column_start":1,"column_end":53}},{"value":"/ CSS escaping (if relevant) should be resolved before calling this function.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70346,"byte_end":70425,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ (For example, the value of an `Ident` token is fine.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70426,"byte_end":70483,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":70484,"byte_end":70493,"line_start":209,"line_end":209,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\nth.rs","byte_start":85033,"byte_end":85042,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"parse_nth","qualname":"::nth::parse_nth","value":"pub fn parse_nth<'i, 't>(&mut Parser) -> Result<(i32, i32), BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parse the *An+B* notation, as found in the `:nth-child()` selector.\n The input is typically the arguments of a function,\n in which case the caller needs to check if the arguments’ parser is exhausted.\n Return `Ok((A, B))`, or `Err(())` for a syntax error.\n","sig":null,"attributes":[{"value":"/ Parse the *An+B* notation, as found in the `:nth-child()` selector.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\nth.rs","byte_start":84755,"byte_end":84826,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ The input is typically the arguments of a function,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\nth.rs","byte_start":84827,"byte_end":84882,"line_start":11,"line_end":11,"column_start":1,"column_end":56}},{"value":"/ in which case the caller needs to check if the arguments’ parser is exhausted.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\nth.rs","byte_start":84883,"byte_end":84967,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/ Return `Ok((A, B))`, or `Err(())` for a syntax error.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\nth.rs","byte_start":84968,"byte_end":85025,"line_start":13,"line_end":13,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88418,"byte_end":88423,"line_start":12,"line_end":12,"column_start":11,"column_end":16},"name":"ToCss","qualname":"::serializer::ToCss","value":"ToCss","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Trait for things the can serialize themselves in CSS syntax.\n","sig":null,"attributes":[{"value":"/ Trait for things the can serialize themselves in CSS syntax.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88343,"byte_end":88407,"line_start":11,"line_end":11,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88492,"byte_end":88498,"line_start":14,"line_end":14,"column_start":8,"column_end":14},"name":"to_css","qualname":"::serializer::ToCss::to_css","value":"pub fn to_css<W>(&Self, &mut W) -> fmt::Result where W: fmt::Write","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":" Serialize `self` in CSS syntax, writing to `dest`.\n","sig":null,"attributes":[{"value":"/ Serialize `self` in CSS syntax, writing to `dest`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88430,"byte_end":88484,"line_start":13,"line_end":13,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88741,"byte_end":88754,"line_start":20,"line_end":20,"column_start":8,"column_end":21},"name":"to_css_string","qualname":"::serializer::ToCss::to_css_string","value":"pub fn to_css_string(&Self) -> String","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":" Serialize `self` in CSS syntax and return a string.","sig":null,"attributes":[{"value":"/ Serialize `self` in CSS syntax and return a string.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88564,"byte_end":88619,"line_start":16,"line_end":16,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88624,"byte_end":88627,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ (This is a convenience wrapper for `to_css` and probably should not be overridden.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88632,"byte_end":88719,"line_start":18,"line_end":18,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88724,"byte_end":88733,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89357,"byte_end":89367,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"fmt_to_css","qualname":"::serializer::ToCss::fmt_to_css","value":"pub fn fmt_to_css<W>(&Self, &mut W) -> fmt::Result where W: fmt::Write","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":" Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.","sig":null,"attributes":[{"value":"/ Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88868,"byte_end":88956,"line_start":26,"line_end":26,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88961,"byte_end":88964,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Typical usage is, for a `Foo` that implements `ToCss`:","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":88969,"byte_end":89027,"line_start":28,"line_end":28,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89032,"byte_end":89035,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ ```{rust,ignore}","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89040,"byte_end":89060,"line_start":30,"line_end":30,"column_start":5,"column_end":25}},{"value":"/ use std::fmt;","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89065,"byte_end":89082,"line_start":31,"line_end":31,"column_start":5,"column_end":22}},{"value":"/ impl fmt::Show for Foo {","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89087,"byte_end":89115,"line_start":32,"line_end":32,"column_start":5,"column_end":33}},{"value":"/     #[inline] fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { self.fmt_to_css(f) }","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89120,"byte_end":89213,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ }","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89218,"byte_end":89223,"line_start":34,"line_end":34,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89228,"byte_end":89235,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89240,"byte_end":89243,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ (This is a convenience wrapper for `to_css` and probably should not be overridden.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89248,"byte_end":89335,"line_start":37,"line_end":37,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":89340,"byte_end":89349,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":93439,"byte_end":93459,"line_start":144,"line_end":144,"column_start":8,"column_end":28},"name":"serialize_identifier","qualname":"::serializer::serialize_identifier","value":"pub fn serialize_identifier<W>(&str, &mut W) -> fmt::Result where\nW: fmt::Write","parent":null,"children":[],"decl_id":null,"docs":" Write a CSS identifier, escaping characters as necessary.\n","sig":null,"attributes":[{"value":"/ Write a CSS identifier, escaping characters as necessary.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":93370,"byte_end":93431,"line_start":143,"line_end":143,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95536,"byte_end":95552,"line_start":212,"line_end":212,"column_start":8,"column_end":24},"name":"serialize_string","qualname":"::serializer::serialize_string","value":"pub fn serialize_string<W>(&str, &mut W) -> fmt::Result where W: fmt::Write","parent":null,"children":[],"decl_id":null,"docs":" Write a double-quoted CSS string token, escaping content as necessary.\n","sig":null,"attributes":[{"value":"/ Write a double-quoted CSS string token, escaping content as necessary.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95454,"byte_end":95528,"line_start":211,"line_end":211,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96221,"byte_end":96236,"line_start":236,"line_end":236,"column_start":12,"column_end":27},"name":"CssStringWriter","qualname":"::serializer::CssStringWriter","value":"CssStringWriter {  }","parent":null,"children":[{"krate":0,"index":464}],"decl_id":null,"docs":" A `fmt::Write` adapter that escapes text for writing as a double-quoted CSS string.\n Quotes are not included.","sig":null,"attributes":[{"value":"/ A `fmt::Write` adapter that escapes text for writing as a double-quoted CSS string.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95739,"byte_end":95826,"line_start":220,"line_end":220,"column_start":1,"column_end":88}},{"value":"/ Quotes are not included.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95827,"byte_end":95855,"line_start":221,"line_end":221,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95856,"byte_end":95859,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ Typical usage:","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95860,"byte_end":95878,"line_start":223,"line_end":223,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95879,"byte_end":95882,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ```{rust,ignore}","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95883,"byte_end":95903,"line_start":225,"line_end":225,"column_start":1,"column_end":21}},{"value":"/ fn write_foo<W>(foo: &Foo, dest: &mut W) -> fmt::Result where W: fmt::Write {","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95904,"byte_end":95985,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/     try!(dest.write_str(\"\\\"\"));","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":95986,"byte_end":96021,"line_start":227,"line_end":227,"column_start":1,"column_end":36}},{"value":"/     {","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96022,"byte_end":96031,"line_start":228,"line_end":228,"column_start":1,"column_end":10}},{"value":"/         let mut string_dest = CssStringWriter::new(dest);","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96032,"byte_end":96093,"line_start":229,"line_end":229,"column_start":1,"column_end":62}},{"value":"/         // Write into string_dest...","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96094,"byte_end":96134,"line_start":230,"line_end":230,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96135,"byte_end":96144,"line_start":231,"line_end":231,"column_start":1,"column_end":10}},{"value":"/     try!(dest.write_str(\"\\\"\"));","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96145,"byte_end":96180,"line_start":232,"line_end":232,"column_start":1,"column_end":36}},{"value":"/     Ok(())","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96181,"byte_end":96195,"line_start":233,"line_end":233,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96196,"byte_end":96201,"line_start":234,"line_end":234,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96202,"byte_end":96209,"line_start":235,"line_end":235,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96401,"byte_end":96404,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<CssStringWriter>::new","value":"pub fn new(&'a mut W) -> CssStringWriter","parent":null,"children":[],"decl_id":null,"docs":" Wrap a text writer to create a `CssStringWriter`.\n","sig":null,"attributes":[{"value":"/ Wrap a text writer to create a `CssStringWriter`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96336,"byte_end":96389,"line_start":241,"line_end":241,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":97934,"byte_end":97956,"line_start":294,"line_end":294,"column_start":12,"column_end":34},"name":"TokenSerializationType","qualname":"::serializer::TokenSerializationType","value":"","parent":null,"children":[],"decl_id":null,"docs":" A category of token. See the `needs_separator_when_before` method.\n","sig":null,"attributes":[{"value":"/ A category of token. See the `needs_separator_when_before` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":97807,"byte_end":97877,"line_start":292,"line_end":292,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98206,"byte_end":98213,"line_start":301,"line_end":301,"column_start":12,"column_end":19},"name":"nothing","qualname":"<TokenSerializationType>::nothing","value":"pub fn nothing() -> TokenSerializationType","parent":null,"children":[],"decl_id":null,"docs":" Return a value that represents the absence of a token, e.g. before the start of the input.\n","sig":null,"attributes":[{"value":"/ Return a value that represents the absence of a token, e.g. before the start of the input.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98100,"byte_end":98194,"line_start":300,"line_end":300,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98431,"byte_end":98445,"line_start":306,"line_end":306,"column_start":12,"column_end":26},"name":"set_if_nothing","qualname":"<TokenSerializationType>::set_if_nothing","value":"pub fn set_if_nothing(&mut Self, TokenSerializationType)","parent":null,"children":[],"decl_id":null,"docs":" If this value is `TokenSerializationType::nothing()`, set it to the given value instead.\n","sig":null,"attributes":[{"value":"/ If this value is `TokenSerializationType::nothing()`, set it to the given value instead.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98327,"byte_end":98419,"line_start":305,"line_end":305,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98962,"byte_end":98989,"line_start":318,"line_end":318,"column_start":12,"column_end":39},"name":"needs_separator_when_before","qualname":"<TokenSerializationType>::needs_separator_when_before","value":"pub fn needs_separator_when_before(Self, TokenSerializationType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if, when a token of category `self` is serialized just before\n a token of category `other` with no whitespace in between,\n an empty comment `/**/` needs to be inserted between them\n so that they are not re-parsed as a single token.","sig":null,"attributes":[{"value":"/ Return true if, when a token of category `self` is serialized just before","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98611,"byte_end":98688,"line_start":312,"line_end":312,"column_start":5,"column_end":82}},{"value":"/ a token of category `other` with no whitespace in between,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98693,"byte_end":98755,"line_start":313,"line_end":313,"column_start":5,"column_end":67}},{"value":"/ an empty comment `/**/` needs to be inserted between them","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98760,"byte_end":98821,"line_start":314,"line_end":314,"column_start":5,"column_end":66}},{"value":"/ so that they are not re-parsed as a single token.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98826,"byte_end":98879,"line_start":315,"line_end":315,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98884,"byte_end":98887,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ See https://drafts.csswg.org/css-syntax/#serialization","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98892,"byte_end":98950,"line_start":317,"line_end":317,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":101186,"byte_end":101204,"line_start":374,"line_end":374,"column_start":12,"column_end":30},"name":"serialization_type","qualname":"<Token>::serialization_type","value":"pub fn serialization_type(&Self) -> TokenSerializationType","parent":null,"children":[],"decl_id":null,"docs":" Categorize a token into a type that determines when `/**/` needs to be inserted\n between two tokens when serialized next to each other without whitespace in between.","sig":null,"attributes":[{"value":"/ Categorize a token into a type that determines when `/**/` needs to be inserted","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":100912,"byte_end":100995,"line_start":370,"line_end":370,"column_start":5,"column_end":88}},{"value":"/ between two tokens when serialized next to each other without whitespace in between.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":101000,"byte_end":101088,"line_start":371,"line_end":371,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":101093,"byte_end":101096,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ See the `TokenSerializationType::needs_separator_when_before` method.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":101101,"byte_end":101174,"line_start":373,"line_end":373,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103499,"byte_end":103511,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"UnicodeRange","qualname":"::unicode_range::UnicodeRange","value":"UnicodeRange { start, end }","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390}],"decl_id":null,"docs":" One contiguous range of code points.","sig":null,"attributes":[{"value":"/ One contiguous range of code points.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103330,"byte_end":103370,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103371,"byte_end":103374,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Can not be empty. Can represent a single code point when start == end.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103375,"byte_end":103449,"line_start":15,"line_end":15,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103573,"byte_end":103578,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"start","qualname":"::unicode_range::UnicodeRange::start","value":"u32","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" Inclusive start of the range. In [0, end].\n","sig":null,"attributes":[{"value":"/ Inclusive start of the range. In [0, end].","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103518,"byte_end":103564,"line_start":18,"line_end":18,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103648,"byte_end":103651,"line_start":22,"line_end":22,"column_start":9,"column_end":12},"name":"end","qualname":"::unicode_range::UnicodeRange::end","value":"u32","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" Inclusive end of the range. In [0, 0x10FFFF].\n","sig":null,"attributes":[{"value":"/ Inclusive end of the range. In [0, 0x10FFFF].","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103590,"byte_end":103639,"line_start":21,"line_end":21,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103751,"byte_end":103756,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"parse","qualname":"<UnicodeRange>::parse","value":"pub fn parse<'i, 't>(&mut Parser) -> Result<Self, BasicParseError>","parent":null,"children":[],"decl_id":null,"docs":" https://drafts.csswg.org/css-syntax/#urange-syntax\n","sig":null,"attributes":[{"value":"/ https://drafts.csswg.org/css-syntax/#urange-syntax","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103685,"byte_end":103739,"line_start":26,"line_end":26,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":109957,"byte_end":109970,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"CompactCowStr","qualname":"::compact_cow_str::CompactCowStr","value":"CompactCowStr {  }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"decl_id":null,"docs":" Like `Cow<'a, str>`, but with smaller `std::mem::size_of`. (Two words instead of four.)\n","sig":null,"attributes":[{"value":"/ Like `Cow<'a, str>`, but with smaller `std::mem::size_of`. (Two words instead of four.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":109854,"byte_end":109945,"line_start":21,"line_end":21,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111381,"byte_end":111392,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"is_borrowed","qualname":"<CompactCowStr>::is_borrowed","value":"pub fn is_borrowed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this string refers to borrowed memory\n (as opposed to owned, which would be freed when `CompactCowStr` goes out of scope).\n","sig":null,"attributes":[{"value":"/ Whether this string refers to borrowed memory","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111214,"byte_end":111263,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"/ (as opposed to owned, which would be freed when `CompactCowStr` goes out of scope).","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111268,"byte_end":111355,"line_start":68,"line_end":68,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111360,"byte_end":111369,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111519,"byte_end":111522,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"len","qualname":"<CompactCowStr>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length of this string\n","sig":null,"attributes":[{"value":"/ The length of this string","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111464,"byte_end":111493,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111498,"byte_end":111507,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112059,"byte_end":112065,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"name":"as_str","qualname":"<CompactCowStr>::as_str","value":"pub fn as_str(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" If this string is borrowed, return a slice with the original lifetime,\n not borrowing `self`.","sig":null,"attributes":[{"value":"/ If this string is borrowed, return a slice with the original lifetime,","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111826,"byte_end":111900,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ not borrowing `self`.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111905,"byte_end":111930,"line_start":89,"line_end":89,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111935,"byte_end":111938,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ (`Deref` is implemented unconditionally, but returns a slice with a shorter lifetime.)","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111943,"byte_end":112033,"line_start":91,"line_end":91,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112038,"byte_end":112047,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112338,"byte_end":112348,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<CompactCowStr>::into_owned","value":"pub fn into_owned(Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Convert into `String`, re-using the memory allocation if it was already owned.\n","sig":null,"attributes":[{"value":"/ Convert into `String`, re-using the memory allocation if it was already owned.","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112230,"byte_end":112312,"line_start":101,"line_end":101,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112317,"byte_end":112326,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19254,"byte_end":19275,"line_start":207,"line_end":207,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":20531,"byte_end":20552,"line_start":234,"line_end":234,"column_start":52,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22782,"byte_end":22796,"line_start":288,"line_end":288,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":24489,"byte_end":24503,"line_start":329,"line_end":329,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566270,"byte_end":7566275,"line_start":90,"line_end":90,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7567178,"byte_end":7567187,"line_start":106,"line_end":106,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33686,"byte_end":33696,"line_start":38,"line_end":38,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34153,"byte_end":34163,"line_start":53,"line_end":53,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34529,"byte_end":34540,"line_start":66,"line_end":66,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":35201,"byte_end":35210,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":37332,"byte_end":37342,"line_start":153,"line_end":153,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":37496,"byte_end":37506,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38127,"byte_end":38133,"line_start":180,"line_end":180,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":298},{"krate":0,"index":303},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64747,"byte_end":64751,"line_start":26,"line_end":26,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66847,"byte_end":66851,"line_start":99,"line_end":99,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67765,"byte_end":67770,"line_start":130,"line_end":130,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68017,"byte_end":68022,"line_start":139,"line_end":139,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":90079,"byte_end":90084,"line_start":67,"line_end":67,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96287,"byte_end":96302,"line_start":240,"line_end":240,"column_start":13,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96528,"byte_end":96543,"line_start":247,"line_end":247,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98071,"byte_end":98093,"line_start":299,"line_end":299,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":100896,"byte_end":100901,"line_start":369,"line_end":369,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103666,"byte_end":103678,"line_start":25,"line_end":25,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":108091,"byte_end":108103,"line_start":160,"line_end":160,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":108228,"byte_end":108240,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":110567,"byte_end":110580,"line_start":38,"line_end":38,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":110858,"byte_end":110871,"line_start":51,"line_end":51,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111190,"byte_end":111203,"line_start":66,"line_end":66,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112705,"byte_end":112718,"line_start":117,"line_end":117,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112956,"byte_end":112969,"line_start":128,"line_end":128,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113183,"byte_end":113196,"line_start":139,"line_end":139,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113376,"byte_end":113379,"line_start":150,"line_end":150,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113806,"byte_end":113819,"line_start":166,"line_end":166,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113953,"byte_end":113966,"line_start":173,"line_end":173,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114178,"byte_end":114191,"line_start":183,"line_end":183,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114290,"byte_end":114303,"line_start":190,"line_end":190,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114398,"byte_end":114411,"line_start":197,"line_end":197,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114515,"byte_end":114528,"line_start":204,"line_end":204,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114685,"byte_end":114698,"line_start":211,"line_end":211,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114846,"byte_end":114859,"line_start":218,"line_end":218,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115016,"byte_end":115029,"line_start":225,"line_end":225,"column_start":17,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115055,"byte_end":115068,"line_start":227,"line_end":227,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115205,"byte_end":115218,"line_start":234,"line_end":234,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115373,"byte_end":115386,"line_start":241,"line_end":241,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":19254,"byte_end":19275,"line_start":207,"line_end":207,"column_start":39,"column_end":60},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":20531,"byte_end":20552,"line_start":234,"line_end":234,"column_start":52,"column_end":73},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":113},"to":{"krate":2,"index":4996}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":22782,"byte_end":22796,"line_start":288,"line_end":288,"column_start":39,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\rules_and_declarations.rs","byte_start":24489,"byte_end":24503,"line_start":329,"line_end":329,"column_start":52,"column_end":66},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":141},"to":{"krate":2,"index":4996}},{"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7566270,"byte_end":7566275,"line_start":90,"line_end":90,"column_start":15,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"c:\\Users\\spide\\Documents\\GitHub\\QMK-Lighting-Control-App\\app\\target\\rls\\debug\\build\\cssparser-f32535115033460a\\out/tokenizer.rs","byte_start":7567178,"byte_end":7567187,"line_start":106,"line_end":106,"column_start":15,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":33686,"byte_end":33696,"line_start":38,"line_end":38,"column_start":43,"column_end":53},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1140},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34153,"byte_end":34163,"line_start":53,"line_end":53,"column_start":13,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":34529,"byte_end":34540,"line_start":66,"line_end":66,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":35201,"byte_end":35210,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":37332,"byte_end":37342,"line_start":153,"line_end":153,"column_start":28,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":2053}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":37496,"byte_end":37506,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\parser.rs","byte_start":38127,"byte_end":38133,"line_start":180,"line_end":180,"column_start":18,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":64747,"byte_end":64751,"line_start":26,"line_end":26,"column_start":6,"column_end":10},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":66847,"byte_end":66851,"line_start":99,"line_end":99,"column_start":16,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1197},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":67765,"byte_end":67770,"line_start":130,"line_end":130,"column_start":16,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1211},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\color.rs","byte_start":68017,"byte_end":68022,"line_start":139,"line_end":139,"column_start":6,"column_end":11},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":90079,"byte_end":90084,"line_start":67,"line_end":67,"column_start":20,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96287,"byte_end":96302,"line_start":240,"line_end":240,"column_start":13,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":96528,"byte_end":96543,"line_start":247,"line_end":247,"column_start":28,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":461},"to":{"krate":2,"index":6171}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":98071,"byte_end":98093,"line_start":299,"line_end":299,"column_start":6,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\serializer.rs","byte_start":100896,"byte_end":100901,"line_start":369,"line_end":369,"column_start":10,"column_end":15},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":103666,"byte_end":103678,"line_start":25,"line_end":25,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":108091,"byte_end":108103,"line_start":160,"line_end":160,"column_start":21,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1388},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\unicode_range.rs","byte_start":108228,"byte_end":108240,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1388},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":110567,"byte_end":110580,"line_start":38,"line_end":38,"column_start":28,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":110858,"byte_end":110871,"line_start":51,"line_end":51,"column_start":29,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":111190,"byte_end":111203,"line_start":66,"line_end":66,"column_start":10,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112705,"byte_end":112718,"line_start":117,"line_end":117,"column_start":20,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1625}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":112956,"byte_end":112969,"line_start":128,"line_end":128,"column_start":19,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":2122}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113183,"byte_end":113196,"line_start":139,"line_end":139,"column_start":20,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":2098}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113376,"byte_end":113379,"line_start":150,"line_end":150,"column_start":38,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":5,"index":339},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113806,"byte_end":113819,"line_start":166,"line_end":166,"column_start":27,"column_end":40},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":113953,"byte_end":113966,"line_start":173,"line_end":173,"column_start":33,"column_end":46},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114178,"byte_end":114191,"line_start":183,"line_end":183,"column_start":25,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1836}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114290,"byte_end":114303,"line_start":190,"line_end":190,"column_start":26,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1603}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114398,"byte_end":114411,"line_start":197,"line_end":197,"column_start":22,"column_end":35},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114515,"byte_end":114528,"line_start":204,"line_end":204,"column_start":25,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":6398}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114685,"byte_end":114698,"line_start":211,"line_end":211,"column_start":42,"column_end":55},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1653}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":114846,"byte_end":114859,"line_start":218,"line_end":218,"column_start":43,"column_end":56},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1690}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115016,"byte_end":115029,"line_start":225,"line_end":225,"column_start":17,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1658}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115055,"byte_end":115068,"line_start":227,"line_end":227,"column_start":18,"column_end":31},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":1679}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115205,"byte_end":115218,"line_start":234,"line_end":234,"column_start":27,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\spide\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cssparser-0.16.1\\src\\compact_cow_str.rs","byte_start":115373,"byte_end":115386,"line_start":241,"line_end":241,"column_start":25,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":522},"to":{"krate":2,"index":6210}}]}